(ns filesys
    (require (file :joxify)
             filename file_info
             (filelib :joxify)
             (lists :joxify)
             (string :joxify :as str)
             (erlang :as erl)
             (joxa-core :as jxc)
             re)
    (use (utils :only (!!=/2))))


(defn+ create-dir (dir)
  "Create a directory <dir>.  The parent directory of <dir> must exist."
  (case (file/make-dir dir)
    (:ok              :ok)
    ({:error :eexist} :ok)
    ({:error reason}  (erl/throw reason))))


(defspec delete ((erl/string)) (erl/atom))


(defn+ delete-dir (dname)
  "Delete the directory <dname> along with its contents."
  (jxc/let ({:ok fnames} (file/list-dir dname))
    (lists/foreach (fn (x) (!!= :ok (delete x))) fnames)
    (!!= :ok (file/del-dir dname))))


(defn+ file-type (fname)
  "Returns the file type of <fname> from the read-link-info function.
   NOTE: returns third element (record is not imported into joxa automatically."
  (jxc/let ({:ok fi} (file/read-link-info fname))
    (file_info/type fi)))


(defn+ delete (fd)
  "Delete a file or a directory <fd>."
  (case (file-type fd)
    (:directory (delete-dir fd))
    (:symlink (!!= :ok (file/delete fd)))
    (:regular (!!= :ok (file/delete fd)))))


(defn+ symlink-unless-exists (from to)
  "If the target file <to> does not exist, it is symlinked to the file <from>.
   If it already exists, nothing happens."
  (!!= :true (filelib/is-file from))
  (case (file/make-symlink from to)
    (:ok :ok)
    ({:error :eexist} :ok)
    (other (erl/throw other))))


(defn+ list-dir-regexp (dir regexp)
  "List contents of directory <dir> that match regexp <regexp>."
  (jxc/let ({:ok mp} (re/compile regexp)
            {:ok fnames} (file/list-dir dir))
    (lists/filter (fn (x) (case (re/run x mp) ({:match _} :true) (:nomatch :false))) fnames))) 


(defn+ delete-regexp-files (dir regexp)
  "Delete all files in dir <dir> that match regexp <regexp>."
  (lists/foreach (fn (x) (!!= :ok (file/delete x)))
                 (list-dir-regexp dir regexp)))


(defn+ symlink-files-to-dir (files tgt-dir)
  "Create symlinks of files <files> in directory <tgt-dir>, reuse basename of file."
  (lists/map (fn (x) (!!= :ok (symlink-unless-exists x (filename/join tgt-dir (filename/basename x))))) files)
  :ok)


(defn+ symlink-files-to-dir (bfiles src-dir tgt-dir)
  "Symlink the files <bfiles> (identified by their basenames) in directory <src-dir> to directory <tgt-dir>."
  (lists/map (fn (x) (!!= :ok (symlink-unless-exists (filename/join src-dir x) (filename/join tgt-dir x)))) bfiles)
  :ok)


(defn+ clone-with-files (src-dir tgt-dir files)
  "Make a 'clone' of a directory <src-dir> by creating a new directory <tgt-dir> and symlinking <files>."
  (!!= :directory (file-type src-dir))
  (create-dir tgt-dir)
  (lists/map (fn (x) (symlink-unless-exists (filename/join src-dir x) (filename/join tgt-dir x))) files)
  :ok)


(defn+ rename-file (src-name tgt-name)
  "Rename the file <src-name> to the file <tgt-name>."
  (!!= :ok (file/rename src-name tgt-name)))


(defn+ copy (src dst)
  "Copy the name <src> to <dst>."
  (!!= {:ok _} (file/copy src dst))
  :ok)

