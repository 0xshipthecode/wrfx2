(ns filesys
    (require (file :joxify)
             filename
             (filelib :joxify)
             (lists :joxify)
             (string :joxify :as str)
             (erlang :as erl)
             (joxa-core :as jxc)
             re)
    (use (utils :only (!!=/2 wait-for-file/3))))


(defn+ create-dir (dir)
  "Create a directory <dir>.  The parent directory of <dir> must exist."
  (case (file/make-dir dir)
    (:ok              :ok)
    ({:error :eexist} :ok)
    ({:error reason}  (erl/throw reason))))


(defn+ wait-for-file (file-name timeout file-wait-chunk-ms)
  ;; forward call to utility module
  (wait-for-file file-name timeout file-wait-chunk-ms))


(defspec delete ((erl/string)) (erl/atom))

(defn+ delete-dir (dname)
  "Delete the directory <dname> along with its contents."
  (jxc/let ({:ok fnames} (file/list-dir dname))
    (lists/foreach (fn (x) (!!= :ok (delete x))) fnames)
    (!!= :ok (file/del-dir dname))))


(defn+ file-type (fname)
  "Returns the file type of <fname> from the read-link-info function.
   NOTE: returns third element (record is not imported into joxa automatically."
  (jxc/let ({:ok fi} (file/read-link-info fname))
    (erl/element 3 fi)))


(defn+ delete (fd)
  "Delete a file or a directory <fd>."
  (case (file-type fd)
    (:directory (delete-dir fd))
    (:symlink (!!= :ok (file/delete fd)))
    (:regular (!!= :ok (file/delete fd)))))


(defn+ symlink-unless-exists (from to)
  "If the target file <to> does not exist, it is symlinked to the file <from>.
   If it already exists, nothing happens."
  (case (filelib/is-file to)
    (:false (!!= :ok (file/make-symlink from to)))
    (:true :ok)))


(defn+ list-dir-regexp (dir regexp)
  "List contents of directory <dir> that match regexp <regexp>."
  (jxc/let ({:ok mp} (re/compile regexp)
            {:ok fnames} (file/list-dir dir))
    (lists/filter (fn (x) (case (re/run x mp) ({:match _} :true) (:nomatch :false))) fnames))) 


(defn+ delete-regexp-files (dir regexp)
  "Delete all files in dir <dir> that match regexp <regexp>."
  (lists/foreach (fn (x) (!!= :ok (file/delete x)))
                 (list-dir-regexp dir regexp)))


(defn+ clone-with-files (src-dir tgt-dir files)
  "Make a 'clone' of a directory <src-dir> by creating a new directory <tgt-dir> and symlinking <files>."
  (!!= :directory (file-type src-dir))
  (create-dir tgt-dir)
  (lists/map (fn (x) (symlink-unless-exists (filename/join src-dir x) (filename/join tgt-dir x))) files))


