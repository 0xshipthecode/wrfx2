(ns msglog
    (require io 
	     file
	     (erlang :as erl)
	     (joxa-core :as jxc)
	     (calendar :joxify)
	     (io_lib :as iol)))



;;define standard message levels
(jxc/define INFO 0)
(jxc/define WARN 1)
(jxc/define ERROR 2)
(jxc/define FLASH 3)

;; send a message to the log with a given level
(defn+ log-msg (pid level msg &rest args)
  (erl/send pid {:msg level (iol/format msg args)})
  :ok)

(defn+ info (pid msg &rest args)
  (erl/send pid {:msg (INFO) (iol/format msg args)})
  :ok)

(defn+ warn (pid msg &rest args)
  (erl/send pid {:msg (WARN) (iol/format msg args)})
  :ok)

(defn+ error (pid msg &rest args)
  (erl/send pid {:msg (ERROR) (iol/format msg args)})
  :ok)

(defn+ flash (pid msg &rest args)
  (erl/send pid {:msg (FLASH) (iol/format msg args)})
  :ok)


;; send an eof request (files are closed)
(defn+ close-log (pid)
  (erl/send pid :eof)
  :ok)

;; send a stop request (files are not closed)
(defn+ stop-log (pid)
  (erl/send pid :exit)
  :ok)

;; construct a logging timestamp
(defn timestamp ()
  (jxc/let ({{yr mon day}, {hr min sec}} (calendar/local-time))
	    (iol/format "~4..0B~2..0B~2..0B:~2..0B~2..0B~2..0B"
		    [yr mon day hr min sec])))


;; relay message to all targets
(defn route-message (tgt msg-level text)
  (case tgt
	({:stdio level}
	 (when (jxc/gte msg-level level)) 
		    (io/format text))
	({:device dev level} 
	 (when (jxc/gte msg-level level))
		    (io/format dev text []))
	({:relay pid level}
	 (when (jxc/gte msg-level level))
		    (erl/send pid {:msg text}))))


;; relay the eof message to all targets
(defn send-eof (tgt close-msg)
  (case tgt
	({:stdio _level}      (io/format close-msg))
	({:device dev _level} (io/format dev close-msg []) (file/close dev))
	({:relay pid _level}  (erl/send pid :eof))))


(defn level-string (level)
  "Returns a string descriptor of the logging level"
  (case level
	(0 "info")
	(1 "warn")
	(2 "ERROR")
	(3 "FLASH")))


;; the main logging loop which waits for messages in the form
;; {:msg text} send the text to all targets
;; :eof stop the logging loop and notify all targets of the close
;; NOTE: on :eof all files are closed, the log can be closed without closing
;; the files with an :exit
(defn log-loop (log-n targets)
  (receive
   ({:msg level text}
    ; construct a log text & route message at the given level
    (let* (log-text [log-n "-" (level-string level) " [" (timestamp) "] -> " text "\n"])
      (lists/map (fn (tgt) (route-message tgt level log-text)) targets)
      (log-loop log-n targets)))
   (:eof
    (lists/map (fn (tgt) (send-eof tgt [log-n " [" (timestamp) "] -> *** LOG END ***.\n"])) targets))
   (:exit
    :ok)))


;; start the logging system with given targets
(defn+ start-log (log-n targets)
  (erl/spawn (fn () (log-loop log-n targets))))


