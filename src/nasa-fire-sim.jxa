(ns nasa-fire-sim
  (require wrfxlib nlist plist filesys ext-utils ext-job logsrv configsrv wrf-monitor jobstate jobmaster
           ingest-srv grib-src-def (time-arith :as ta) os (io_lib :as iol)
           (string :as str) filename (file :joxify) (erlang :as erl :joxify))
  (use joxa-core utils))


(defn make-wrf-namelist (sim-from sim-to grib-src doms nls0)
  "Write in the simulation time <sim-from> to <sim-to> into <nls0> and add anything
   the grib source needs."
  (let* (nls1     (nlist/set-wrf-start-time nls0 sim-from doms)
         nls2     (nlist/set-wrf-end-time nls1 sim-to doms)
         nls3     (nlist/set-wrf-run-time nls2 sim-from sim-to doms)
         grib-upd (grib-src-def/nl-keys grib-src)
         nls4     (nlist/set-entries grib-upd nls3)
         nls5     (nlist/set-entry "time_control" "history_interval" [10] nls4))
    nls5))


(defn monitor-wrf-execution (wdir pid sim-from sim-to mon-pid jst-pid log-f)
  "Parse the error output of the process with rank 0 in the working
   directory <wdir> while the wrf job with pid <pid> completes."
  (let* (fname (filename/join wdir "rsl.error.0000"))
    (receive
      ({:wrf-history-written 1 sim-time}
        (monitor-wrf-execution wdir pid sim-from sim-to mon-pid jst-pid log-f))
      ({:wrf-history-written 2 sim-time}
        (log-f :info "nasa-fire-sim detected WRF history write at ~w in domain 2" [sim-time 2])
        (let* (sim-time-str (ta/to-esmf-str sim-time)
               wrfout-name  (iol/format "~s/wrfout_d02_~s" [wdir (ta/to-esmf-str sim-from)])
               kml-abs-name (filename/join wdir (erl/++ sim-time-str ".kmz"))
               cmd-str      (iol/format "deps/wrf2kmz/wrf2kml.py ~s T2 ~s ~s" [wrfout-name sim-time-str kml-abs-name]))
          (log-f :info "nasa-fire-sim result from wrf2kml.py ~p" [(os/cmd cmd-str)])
          (jobstate/append jst-pid :kmls kml-abs-name))
        (log-f :info "nasa-fire-sim simulation info - acceleration ~p time to go ~p completion at ~w"
                     [(jobstate/get jst-pid :sim-acceleration) (jobstate/get jst-pid :seconds-to-finish)
                      (jobstate/get jst-pid :completion-time)])
        (monitor-wrf-execution wdir pid sim-from sim-to mon-pid jst-pid log-f))
      ({:proc-started pid comp-start}
        (log-f :info "fire-sim WRF computation started on ~w, monitoring" [comp-start])
        (let* (real-mon-pid (wrf-monitor/start fname sim-from sim-to comp-start jst-pid log-f))
          (monitor-wrf-execution wdir pid sim-from sim-to real-mon-pid jst-pid log-f)))
      ({:ext-proc-complete pid result} (erl/send mon-pid :terminate) result))))


(defn+ run (args jst-pid log-f)
  "Execute the fire-simulation job with the given arguments:
   ign-when: start of the fire as a GMT time
   ign-where: ignition of the fire
   job-id: unique identifier of the job
   work-dir: working directory
   wrf-inst-dir: WRF installation directory
   wps-inst-dir: WPS installation directory
   wps-geog-dir: WPS geography data directory
   grib-src-name: name of the GRIB source"
  (let* (job-id         (plist/get :job-id args)
         short-jid      (plist/get :short-job-id args)
         work-dir       (plist/get :work-dir args)
         wps-idir       (plist/get :wps-install-dir args)
         wrf-idir       (plist/get :wrf-install-dir args)
         grib-src-name  (plist/get :grib-src-name args)
         ign-when       (plist/get :ign-when args)
         ign-where      (plist/get :ign-where args)
         num-nodes      (plist/get :num-nodes args)
         wall-time-hrs  (plist/get :wall-time-hrs args)
         grib-src       (ingest-srv/get-grib-def grib-src-name)
         sim-from       (ta/shift-by-hours ign-when -1)
         sim-to         (ta/shift-by-hours ign-when 3)
         wps-wdir       (filename/join work-dir "wps")
         wrf-wdir       (filename/join work-dir "wrf")
         wps-nl0        (nlist/parse "etc/nlists/colorado2k.wps" :colorado_2k_wps0)
         wrf-nl0        (nlist/parse "etc/nlists/colorado2k.input" :colorado_2k_wrf0)
         all-doms       (nlist/all-domains wps-nl0))

    (log-f :info "nasa-fire-sim [~p] work-dir ~p sim-from ~w sim-to ~w~n" [job-id work-dir sim-from sim-to])

    ; step 1: setup the WRF working directory
    (!!= :ok (filesys/create-dir work-dir))
    (wrfxlib/clone-wrf wrf-idir wrf-wdir)
    (log-f :info "nasa-fire-sim [~p]: creating WRF working directory" [short-jid])

    ; step 2: symlink wrfinputs to WRF
    
    ; step 3: construct the WRF namelist (ignition when/where, etc.)
    (let* (wrf-nl1 (make-wrf-namelist sim-from sim-to grib-src all-doms wrf-nl0))
      (log-f :info "nasa-fire-sim [~p] writing namelist.input for WRF" [short-jid])
      (!!= :ok (file/write-file (filename/join wrf-wdir "namelist.input") (nlist/render-namelists wrf-nl1))))

    ; step 4: run WRF
    (log-f :info "nasa-fire-sim [~p] running WRF" [short-jid])
    (jobstate/set jst-pid :stage "wrf queued")
    (case (ext-job/run "wrf" (filename/join wrf-wdir "wrf.exe") wrf-wdir num-nodes 2 wall-time-hrs 60000 3600000 log-f)
      ({:running wrf-pid}
        (jobstate/set jst-pid :stage "wrf running")
        (monitor-wrf-execution wrf-wdir wrf-pid sim-from sim-to :undefined jst-pid log-f))
      ({:success exit-code}
        (log-f :info "nasa-fire-sim [~p] job is already completed, nothing to compute" [short-jid])))
    (log-f :info "nasa-fire-sim [~p] end of job reached" [short-jid])
    (jobstate/set jst-pid :stage "done")

    :ok))


(defn+ wrap-run (args jst-pid)
  (let* (short-jid (plist/get :short-job-id args)
         log-name  (erl/++ "fs" short-jid))
    (!!= :ok (logsrv/create-log log-name))
    (try*
      (do
        (run args jst-pid (logsrv/make-log-f log-name))
        (logsrv/close-log log-name))
      (catch (type body)
        (do
          (logsrv/msg "system" :error "fire-sim [~p] job crashed (exc: ~p body ~p)~nstacktrace ~p~n"
                      [short-jid type body (erl/get-stacktrace)])
          (logsrv/close-log log-name)
          :error)))))


(defn+ submit (uuid ign-when ign-where num-nodes)
  (let* (short-uuid (str/substr uuid 1 8)
         jst-pid    (jobstate/start-link uuid)
         params [ {:job-id uuid}
                  {:short-job-id short-uuid}
                  {:ign-when ign-when}
                  {:ign-where ign-where}
                  {:work-dir (filename/join (configsrv/get-conf :workspace-dir) uuid)}
                  {:wps-inst-dir "/storage/akochans/NASA_NOAA/wrf-fire/WPS"}
                  {:wrf-inst-dir "/storage/akochans/NASA_NOAA/wrf-fire/WRFV3/test/em_barker"}
                  {:wps-geog-dir "/storage/jbeezley/git/wrfdata/geog"}
                  {:num-nodes num-nodes}
                  {:wall-time-hrs 4} ])
    (jobstate/set jst-pid :kmls [])
    (erl/spawn (fn () (wrap-run params jst-pid)))))


(defn+ test ()
  (submit "49179656-7a1f-420a-b090-36902300fd9a" {{2012 9 9} {4 0 0}} {47.913 -119.116} 10))

