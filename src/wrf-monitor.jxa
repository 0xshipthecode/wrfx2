(ns wrf-monitor
  (require (timelib :as ta) lists utils jobmaster
           re (file :joxify) (erlang :as erl :joxify)
           (string :as str :joxify))
  (use joxa-core utils))


(defn estimate-remaining-time (sim-now sim-end sim-acceleration)
  "Estimates the remaining time in the simulation given that the simulation
   is at <sim-now>, continues to <sim-end> and is <sim-acceleration> faster
   (or slower) than real time."
  (let* (sim-time-left-s   (ta/seconds-between sim-now sim-end))
    (erl/round (erl/:'/' sim-time-left-s sim-acceleration))))


(defn estimate-acceleration (sim-start sim-now comp-start now)
  "Estimate the speedup/slowdown of simulation time vs real time."
  (let* (comp-time-s       (ta/seconds-between comp-start now)
         sim-time-s        (ta/seconds-between sim-start sim-now))
    (erl/:'/' sim-time-s comp-time-s)))


(defn percent-complete (sim-start sim-now sim-end)
  "Compute the percentage of the job done given simulation start/end and current timestamp."
  (let* (done-time  (ta/seconds-between sim-start sim-now)
         total-time (ta/seconds-between sim-start sim-end))
    (erl/* 100.0 (erl/:'/' done-time total-time))))


(defspec monitor-loop ((erl/device) (erl/tuple) (erl/tuple) (erl/tuple) (erl/string) (erl/pid) (erl/function)) (erl/any))

(defn process-timing (line dev sim-start sim-end comp-start uuid master-pid log-f)
  (let* (time-ndx   (str/str line "time")
         esmf-date  (str/substr line (+ time-ndx 5) 19)
         domain-ndx (str/str line "domain")
         domain-id (erl/list-to-integer (str/strip (str/substr line (+ domain-ndx 6) 4))))
    (when (erl/=:= domain-id 1)
      (let* (now       (ta/local-time)
             sim-now   (ta/parse-esmf esmf-date))
        (case now
          (comp-start ; too soon in the physical world, can't estimate any speed
            (monitor-loop dev sim-start sim-end comp-start uuid master-pid log-f))
          (later-than-comp-start
            (let* (sim-accel (estimate-acceleration sim-start sim-now comp-start now)
                   to-go-s   (estimate-remaining-time sim-now sim-end sim-accel)
                   perc-done (percent-complete sim-start sim-now sim-end))
              (jobmaster/updatestate uuid [{:completion-time (ta/shift-by-seconds now to-go-s)} {:seconds-to-finish to-go-s}
                                           {:sim-acceleration sim-accel} {:sim-time sim-now} {:percent-done perc-done}])))))))
  (monitor-loop dev sim-start sim-end comp-start uuid master-pid log-f))


(defn process-writing (line dev sim-start sim-end comp-start uuid master-pid log-f)
  (let* (esmf-date (str/substr line 31 19)
         domain-id (erl/list-to-integer (str/strip (str/substr line 61 9)))
         sim-time  (ta/parse-esmf esmf-date))
    (jobmaster/updatestate uuid [{:wrf-history-written {domain-id sim-time}}])
    (erl/send master-pid {:wrf-history-written domain-id sim-time})
    (monitor-loop dev sim-start sim-end comp-start uuid master-pid log-f)))


(defn monitor-loop (dev sim-start sim-end comp-start uuid master-pid log-f)
  (try*
    (case (file/read-line dev)
      (:eof
        (receive
          (after 250 (monitor-loop dev sim-start sim-end comp-start uuid master-pid log-f))
          (:terminate :ok)))
      ({:ok line}
        (when (lists/prefix "Timing for main" line)
          (process-timing line dev sim-start sim-end comp-start uuid master-pid log-f))
        (when (lists/prefix "Timing for Writing" line)
          (process-writing line dev sim-start sim-end comp-start uuid master-pid log-f))
        (when (erl/> (str/str line "cfl") 0)
            (erl/send master-pid :cfl-violation-detected))
        (monitor-loop dev sim-start sim-end comp-start uuid master-pid log-f))
      ({:error reason}
        (log-f :error "wrf-monitor encountered an error [~p] reading from rsl.error.0000" [reason])))
    (catch (type bdy)
      (do
        (log-f :flash "wrf-monitor encountered exception type ~p bdy ~p stack ~p" [type bdy (erl/get-stacktrace)])
        (monitor-loop dev sim-start sim-end comp-start uuid master-pid log-f)))))


(defn+ run (fname sim-start sim-end comp-start uuid master-pid log-f)
  "Monitor the wrf output log rsl.error.0000 opened as <dev>.  Given information on
   when the simulation extent <sim-start> to <sim-end> and when the computation was
   started <comp-start>, the monitor will estimate when the the computation will terminate."
  (case (wait-for-file fname 120000 500)
    ({:success _}
      (let ({:ok dev} (file/open fname [:read]))
        (monitor-loop dev sim-start sim-end comp-start uuid master-pid log-f)
        (file/close dev)))
    ({:failure :timeout}
      (log-f :error "wrf-monitor waited 120 seconds for file ~p to appear and timed out." [fname])
       {:failure :timeout})))


(defn+ start (fname sim-start sim-end comp-start job-id log-f)
  "Start the run/5 function in a new process and return the pid.
   For arguments see run/5."
  (let* (myself (erl/self))
    (erl/spawn (fn () (run fname sim-start sim-end comp-start job-id myself log-f)))))

