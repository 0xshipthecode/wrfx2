(ns wrfxlib
  (require filesys filename ext-proc ext-job ext-utils plist
           (erlang :as erl :joxify))
  (use joxa-core utils))


(defn+ clone-wps (src dst vtable add-files)
  "Clone the WPS directory <src> to another location <dst>.
   This function uses a standard list of files that must be symlinked with
   other standard files, such as the <vtable> relative path passed automatically."
  (!!= :ok (filesys/clone-with-files src dst [ "geogrid.exe" "geogrid" "metgrid.exe" "metgrid" "ungrib.exe" "ungrib"]))
  (!!= :ok (filesys/symlink-unless-exists (filename/join src vtable) (filename/join dst "Vtable")))
  (filesys/symlink-files-to-dir add-files src dst))


(defn+ clone-wrf (src dst)
  "Clone the WRF director <src> to another location <dst>.
   Makes symlinks to a standard list of files."
  (filesys/clone-with-files src dst
   ["CAM_ABS_DATA" "CAM_AEROPT_DATA" "co2_trans" "ETAMPNEW_DATA" "ETAMPNEW_DATA_DBL"
    "ETAMPNEW_DATA.expanded_rain" "ETAMPNEW_DATA.expanded_rain_DBL" "GENPARM.TBL"
    "gribmap.txt" "grib2map.tbl" "LANDUSE.TBL" "MPTABLE.TBL" "namelist.fire"
    "ozone.formatted" "ozone_lat.formatted" "ozone_plev.formatted"
    "real.exe" "RRTM_DATA" "RRTM_DATA_DBL" "RRTMG_LW_DATA" "RRTMG_LW_DATA_DBL"
    "RRTMG_SW_DATA" "RRTMG_SW_DATA_DBL" "SOILPARM.TBL" "tc.exe" "tr49t67" "tr49t85"
    "tr67t85" "URBPARM.TBL" "URBPARM_UZE.TBL" "VEGPARM.TBL" "wrf.exe"]))


(defn+ run-geogrid (in-dir log-f)
  (let* (out-spec  (ext-utils/make-std-output-spec in-dir "geogrid")
         cmd       (filename/join in-dir "geogrid.exe"))
    (log-f :info "running GEOGRID" [])
    (!!= 0 (ext-utils/wrap-run (ext-proc/run "geogrid" cmd out-spec in-dir 1200000 log-f)))
    (!!= :found (grep-file (plist/get 1 out-spec) "Successful completion of geogrid."))
    (log-f :info "geogrid completed successfully" [])))


(defn+ run-ungrib (in-dir log-f)
  "Run ungrib.exe in the WPS directory <in-dir> and log progress to using <log-f>."
  (let* (out-spec (ext-utils/make-std-output-spec in-dir "ungrib")
         cmd      (filename/join in-dir "ungrib.exe"))
    (log-f :info "running UNGRIB" [])
    (!!= 0 (ext-utils/wrap-run (ext-proc/run "ungrib" cmd out-spec in-dir 1800000 log-f)))
    (!!= :found (grep-file (plist/get 1 out-spec) "Successful completion of ungrib."))
    (log-f :info "ungrib completed succesfully." [])))


(defn+ run-metgrid (in-dir log-f)
  "Run metgrid.exe in the WPS directory <in-dir> and log progress using <log-f>."
  (let* (out-spec (ext-utils/make-std-output-spec in-dir "metgrid")
         cmd      (filename/join in-dir "metgrid.exe"))
    (log-f :info "running METGRID" [])
    (!!= 0 (ext-utils/wrap-run (ext-proc/run "metgrid" cmd out-spec in-dir 1800000 log-f)))
    (!!= :found (grep-file (plist/get 1 out-spec) "Successful completion of metgrid."))
    (log-f :info "metgrid completed succesfully." [])))


(defn+ run-real (in-dir log-f)
  "Run the (parallel) real.exe in the WRF directory <in-dir> and log progress using <log-f>."
  (let* (cmd          (filename/join in-dir "real.exe")
         out-file     (filename/join in-dir "rsl.out.0000")
         err-file     (filename/join in-dir "rsl.error.0000")
         new-out-file (filename/join in-dir "real.stdout"))
    (log-f :info "running REAL" [])
    (case (ext-proc/run "real" cmd [] in-dir 1800000 log-f)
      ({:running pid}
        (case (ext-utils/wait-for-completion pid)
          ({:success exit-code}
            (!!= :ok (filesys/copy out-file new-out-file))
            (!!= :ok (filesys/copy err-file (filename/join in-dir "real.stderr"))))
          (error (erl/throw error))))
      ({:success exit-code} exit-code))
    (!!= :found (grep-file new-out-file "SUCCESS COMPLETE REAL_EM"))
    (log-f :info "real completed succesfully" [])))


(defn+ next-grib-suffix (suff)
  "Returns the next suffix in the sequence AAA, AAB, ACC, ..., ZZZ after <suff>."
  (let ([s1 s2 s3] suff)
    (case (+ s3 1)
      (91 (case (+ s2 1)
            (91 (case (+ s1 1)
                  (91 (erl/throw "too many grib files"))
                  (ns3 [ns3 :\A :\A])))
            (ns2 [s1 ns2 :\A])))
      (ns3 [s1 s2 ns3]))))


(defn+ symlink-grib-files (mfest dir)
  "Construct symlinks to the GRIB files in <mfest> in directory <dir> according
   to ungrib.exe requirements.  Assumes that the manifest files <mfest> are ordered
   temporally."
  (lists/foldl (fn (x acc) (filesys/symlink-unless-exists x (filename/join dir (erl/++ "GRIBFILE." acc)))
                           (next-grib-suffix acc)) "AAA" mfest))

