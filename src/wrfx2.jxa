; Copyright (C) 2013-2014 Martin Vejmelka, UC Denver
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
; of the Software, and to permit persons to whom the Software is furnished to do
; so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
; A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(ns wrfx2
    (require
       jobmaster (configsrv :joxify) (logsrv :joxify) (sysmon :joxify) raws_ingest grib_ingest
       (scheduler :joxify) perftrack inet inets io (file :joxify) filename crypto net_adm
       (io_lib :as iol) (erlang :as erl :joxify) (filelib :joxify) (application :joxify)
       (pgsql_manager :as dbif :joxify) (catmaster :joxify))
    (use joxa-core utils))


(defn+ start-logging ()
  "Start the logging subsystem."
  (let* (log-dir (configsrv/get-conf :logging_dir))
    (filelib/ensure-dir (filename/join [log-dir "log-file"]))
    (logsrv/start-link log-dir)))


(defn+ start-ingest-system ()
  "Start up the ingest system."
  (raws_ingest/start)
  ;NOTE: this was removed as we want grib_ingest to use the standard error_logger
  ;(let* (grib-log-f (logsrv/make-log-f "grib-ingest"))
    ;(application/set-env :grib_ingest :logging_function grib-log-f))
  (application/set-env :grib_ingest :grib_storage_dir (configsrv/get-conf :ingest_dir))
  (grib_ingest/start))


(defn+ start-otp-subsystem ()
  "Start the OTP subsystems required for wrfx2 platform services."
  (inets/start)
  (crypto/start))


(defn wrfx2web-node-name ()
  (let (wrfx2web-base  (configsrv/get-conf :wrfx2web_node)
        {:ok hostname} (inet/gethostname))
    (erl/list-to-atom (lists/flatten [wrfx2web-base "@" hostname]))))


(defn start-dbase ()
  "Start up the PostgreSQL interface."
  (let* (dbname (configsrv/get-conf :dbname)
         dbuser (configsrv/get-conf :dbuser)
         dbpwd  (configsrv/get-conf :dbpwd))
    (dbif/start-link dbname dbuser dbpwd 5)))
 

(defn+ start ()
  ; start the configuation server
  (configsrv/start-link)
  ; start otp subsystems that we need
  (start-otp-subsystem)
  ; start the RDBMS interface (with a pool of 5 connections)
  (log-info "config srv keys: ~p" [(configsrv/all-keys)])
  ; start the database interface
  (start-dbase)
  ; start the catalog manager
  (catmaster/start-link (configsrv/get-conf :product_dir) (configsrv/get-conf :catalog_keep_days))
  ; start logging subsystem for jobs
  (start-logging)
  ; initialize the performance tracking and instrumentation library
  (perftrack/initialize)
  ; start the ingest system
  (start-ingest-system)
  ; start the job manager
  (jobmaster/start_link)
  ; start the system monitor
  (sysmon/start-link)
  ; start scheduler
  (scheduler/start-link)
  ; check if the webserver is up, if yes, connect
  (let (w2w-name (wrfx2web-node-name))
    (log-info "pinging ~p to check if it is up." [w2w-name])
    (case (net_adm/ping w2w-name)
      (:pong (log-info "node ~p is up & connected." [w2w-name]))
      (:pang (log-info "node ~p is currently unreachable." [w2w-name]))))
  ; we are ready to go
  (log-info "wrfx2 startup complete" []))


