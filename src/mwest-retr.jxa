;    Second generation WRF execution platform services.
;    Copyright (C) 2013 Martin Vejmelka
;
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.

;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.

;    You should have received a copy of the GNU General Public License along
;    with this program; if not, write to the Free Software Foundation, Inc.,
;    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

(ns mwest-retr
     (require httpc lists plist filename
              (mnesia :joxify)
              raws-src-def
              (dict :joxify)
              (time-arith :as ta)
              (erlang :as erl :joxify)
              (string :as str :joxify)
              (io_lib :as iol)
              (joxa-core :as jxc)
              (joxa-lists :as jxl)
              (mochiweb_xpath :as xpath)
              (mochiweb_html :as html)
              utils))


;; example URL from the MesoWest website
;; http://mesowest.utah.edu/cgi-bin/droman/meso_download_mesowest_ndb.cgi?product=&stn=ESPC2&unit=1&time=GMT&daycalendar=1&day1=22&month1=08&year1=2013&hour1=1&hours=24&output=csv&order=0&TMPF=TMPF&RELH=RELH&SKNT=SKNT&GUST=GUST&DRCT=DRCT&QFLG=QFLG&VOLT=VOLT&FT=FT&FM=FM&TLKE=TLKE&PEAK=PEAK&PDIR=PDIR&PREC=PREC&SINT=SINT&SOLR=SOLR&ITIM=ITIM&UTIM=UTIM&DWPF=DWPF

(defn+ make-dl-url (station-code ts num-hours raws-src)
  "Constructs the download URL that retrieves variables in <var-list> for station <station-code> for <num-hours> hours up to time <ts>."
  (jxc/let ({{y m d} {h _ _}} ts)
    (lists/flatten [ "http://mesowest.utah.edu/cgi-bin/droman/meso_download_mesowest_ndb.cgi?unit=1&time=GMT&daycalendar=1&output=csv&order=0"
                     (iol/format "&stn=~s" [station-code])
                     (lists/map (fn (x) (iol/format "&~s=~s" [x x])) (raws-src-def/var-list raws-src))
                     (iol/format "&day1=~p&month1=~p&year1=~p&hour1=~p&hours=~p" [d m y h num-hours]) ])))


(defn+ parse-station-info (st-line)
  (let* (tokens (str/tokens st-line " "))
    (jxc/let ((st-code . rest) tokens
              ("RAWS" . ("m" . (height . (lon . (lat . name-lst))))) (lists/reverse rest))
              [{:code st-code} {:lon lon} {:lat lat}
               {:name (str/join (lists/reverse name-lst) " ")}
               {:elevation height}])))

    
(defn parse-params (p-line)
  "Parses the line PARM = A,B,C,D and returns [A B C D]."
  (let* (tokens (lists/map (fn (x) (str/strip x)) (str/tokens p-line "=")))
    (jxc/let (("PARM" . (param-str . [])) tokens)
       (str/tokens param-str ","))))


(defn parse-obs-line (line params)
  (let* (get-int (fn (name d) (erl/list-to-integer (dict/fetch name d)))
         tokens (lists/map (fn (x) (str/strip x)) (str/tokens line ","))
         d (dict/from-list (lists/zip params tokens))
         ts {{(get-int "YEAR" d) (get-int "MON" d) (get-int "DAY" d)} {(get-int "HR" d) (get-int "MIN" d) 0}}
         params-only-dict (lists/foldl (fn (k d) (dict/erase k d)) d ["YEAR" "MON" "DAY" "HR" "MIN" "TMZN"])
         float-params-dict (dict/map (fn (_k v) (utils/str-to-num v)) params-only-dict))
    {ts (dict/to-list float-params-dict)}))


(defn parse-station-observations (data)
  "Parses the parameters/observations part of the return page." 
  (let* (lines (str/tokens data "\n")
         parms (parse-params (jxl/hd lines))
         obs-lines (jxl/tl lines))
    (lists/map (fn (x) (parse-obs-line x parms)) obs-lines)))


(defn parse-page-body (body)
  "Parse the <body> of the HTML page returned from the mesowest website."
  (let* (parsed (html/parse body)
         info-list (xpath/execute "//div/text()" parsed)
         data-list (xpath/execute "//pre/text()" parsed)
         st-info (parse-station-info (erl/binary-to-list (jxl/hd info-list)))
         st-code (plist/get :code st-info)
         st-obs (parse-station-observations (erl/binary-to-list (lists/nth 2 data-list))))
    {st-info st-obs}))


(defn+ download-station-obs (station-code to num-hrs raws-src log-f)
  "Retrieve observations for variables <var-list> of station <station-code> from <from> to <to>.
   Whatever is available is retrieved from <stor-dir>, whatever isn't must be downloaded to the appropriate location."
  (let* (url      (make-dl-url station-code to num-hrs raws-src))
    (log-f :info ["mwest-retr: requesting observations from ~p on vars ~p for ~p hrs to ~w"
                  station-code (raws-src-def/var-list raws-src) num-hrs to]) 
    (case (httpc/request :get {url []} [] [])
      ({:ok {{_ 200 _} hdrs body}}
        (log-f :info ["mwest-retr: station ~p success retrieving page ~p" station-code url])
        (parse-page-body body))
      ({:ok {{_ http-code reason} _ _}} {:error http-code reason})
      ({:error reason} {:error reason}))))


(defn+ entry-exists? (key)
  "Check if the <key> entry exists in the mnesia table :mwestraws."
  (case (mnesia/dirty-read :mwestraws key)
    ([] :false)
    (other :true)))


(defn+ get-entry (key)
  (jxc/let ({:mwestraws key obs-time obss} (jxl/hd (mnesia/dirty-read :mwestraws key)))
    {obs-time obss}))

(defn+ get-station-info (station-code)
  (jxc/let ({:mwestraws station-code :info st-info} (jxl/hd (mnesia/dirty-read :mwestraws station-code)))
    st-info))

(defn write-entry (station-code ts obs)
  (mnesia/dirty-write :mwestraws {:mwestraws {(ta/round-hours ts :down) station-code} ts obs})) 


(defn retrieve-missing-obs (station-code missing-hrs raws-src log-f)
  "Retrieves missing observations in 24-hr chunks from the mesowest server
   for station <station-code> to cover missing hours <missing-hrs>."
  (io/format "missing obs -> ~p~n" [missing-hrs])
  (case missing-hrs
    ([] :ok)
    ((missing . _rest)
      (jxc/let ({st-info st-obs} (download-station-obs station-code (ta/shift-by-hours missing 1) 24 raws-src log-f))
        (mnesia/dirty-write :mwestraws {:mwestraws station-code :info st-info})
        (lists/map (utils/fnm1 {ts obs} (write-entry station-code ts obs)) st-obs)
        (let* (new-missing (erl/-- missing-hrs (lists/map (utils/fnm1 {dt _} (ta/round-hours dt :down)) st-obs)))
          (retrieve-missing-obs station-code new-missing raws-src log-f))))))


(defn+ retrieve-station-obs (station-code from to raws-src log-f)
  (let* (hr-list     (ta/list-hours from to)
         missing-hrs (lists/filter (fn (x) (erl/not (entry-exists? {x station-code}))) hr-list))
    (retrieve-missing-obs station-code (lists/reverse missing-hrs) raws-src log-f)
    {(get-station-info station-code) (lists/map (fn (x) (get-entry {x station-code})) hr-list)})) 
    

(defn+ retrieve-stations-obs (station-list from to raws-src log-f)
  "Retrieve observations for variables <var-list> from <from> to <to> for stations with codes <station-list>." 
  (utils/pmap (fn (x) (retrieve-station-obs x from to raws-src log-f)) (raws-src-def/max-dl raws-src) station-list))
 
