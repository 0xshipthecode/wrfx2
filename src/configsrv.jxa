(ns configsrv
  (require plist utils
           (erlang :as erl :joxify) (file :joxify) (dict :joxify)
	         inets gen_server)
  (use joxa-core))


; utility functions

(defn config-valid? (fname)
  "Check if the configuration file <fname> is a valid plist."
  (case (utils/execute-file fname)
    ({:ok cfg} (plist/plist? cfg))
    (error {:false error})))


; API

(defn+ start-link ()
  "Start the configuration server <log-f>."
    (case (utils/execute-file "etc/config")
      ({:ok cfg} (gen_server/start_link {:local :configsrv} :configsrv [cfg] []))
      (error (erl/throw error))))


(defn+ reload-config ()
  "Reload the configuration file."
  (case (utils/execute-file "etc/config")
    ({:ok cfg} (gen_server/call :configsrv {:reload cfg})
               :success)
    (error error)))


(defn+ get-conf (key)
  "Retrieve the configuration value for the key <key>."
  (case (gen_server/call :configsrv {:get-conf key})
    (:no-such-key (erl/throw {:no-such-key key}))
    (value value)))


(defn+ get-keys ()
  "Retrieve all keys from the configuration server."
  (gen_server/call :configsrv :get-keys))


; Implementation

(defn+ init (args)
    {:ok args})


(defn+ handle_call (request from state)
  (let ([cfg] state)
    (case request
      ({:get-conf key}    {:reply (plist/get key :no-such-key cfg) state})
      (:get-keys          {:reply (plist/keys cfg) state})
      ({:reload new-cfg}  {:reply :ok [new-cfg]})
      (:stop-cfg-srv      {:stop :normal :ok state})
      (other              {:reply :invalid-request state}))))

(defn+ handle_cast (msg state)
  {:noreply state})

(defn+ handle_info (info state)
  {:noreply state})

(defn+ terminate (reason state)
  :ok)

(defn+ code_change (old-vsn state extra)
  {:ok state})

