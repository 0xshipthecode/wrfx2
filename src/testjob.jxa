; Copyright (C) 2013 Martin Vejmelka, UC Denver
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
; of the Software, and to permit persons to whom the Software is furnished to do
; so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
; A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(ns testjob
  (require wrfxlib nlist nllib plist filesys ext-wrappers perftrack
           configsrv jobmaster (timelib :as ta) os grib_ingest
           (string :as str) filename (file :joxify) (erlang :as erl :joxify))
  (use joxa-core utils))


(defn+ run (args log-f)
  "Execute the wfc-jobulation job with the given arguments."
  (let* (uuid           (plist/get :uuid args)
         work-dir       (plist/get :work-dir args)
         now            (ta/round-hours (ta/universal-time) :down))

    (log-f :info "testjob [~s] with work-dir ~s" [uuid work-dir])

    ; create the working directory for WPS
    (jobmaster/updatestate uuid [{:stage "BEGIN"}])

    ; retrieve some data from a nam_218 grib source
    (perftrack/instrument-as "testjob" uuid "grib-retr" []
      (fn () (grib_ingest/retrieve_gribs now (ta/shift-by-hours now 4) now
                                         [{:use_grib_source :nam_218} :try_retrieve :shift_cycle :try_retrieve])))

    (perftrack/instrument-as "testjob" uuid "task1" []
      (fn () (ext-wrappers/run-process "task1" "sleep 5" [] work-dir 6000 log-f 0 (fn () :passed) 1)))

    (jobmaster/updatestate uuid [{:stage "stage 2"}])

    (perftrack/instrument-as "testjob" uuid "task2" []
      (fn () (ext-wrappers/run-process "task2" "sleep 5" [] work-dir 6000 log-f 0 (fn () :passed) 1)))

    (log-f :info "testjob [~s] end of job reached" [uuid])
    (jobmaster/updatestate uuid [{:stage "COMPLETE"}])

    :ok))


(defn+ test ()
  (let* (uuid "76aabb9e-4d4a-4cfc-b5f0-696ba52d7909")
    (jobmaster/submit uuid :testjob 
        [])))


