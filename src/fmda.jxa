; Copyright (C) 2013-2014 Martin Vejmelka, UC Denver
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
; of the Software, and to permit persons to whom the Software is furnished to do
; so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
; A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(ns fmda
  (require plist lists jobmaster (timelib :as ta) (io_lib :as iol)
           (string :as str) filename (file :joxify) (erlang :as erl :joxify))
  (use joxa-core utils))


(defn+ write-fmda-cfg (st-list-file wrfout-path covariates fname)
  (file/write-file fname (lists/flatten [
      "{\n"
      "\t'station_info_dir' : 'data',\n"
      "\t'station_data_dir' : 'data',\n"
      "\t'station_list_file' : '" st-list-file "',\n"
      "\t'output_dir' : '.',\n"
      "\t'wrf_output' : '" wrfout-path "',\n"
      "\t'write_fields' : 'fmc_gc',\n"
      "\t'start_time' : None,\n"
      "\t'end_time' : None,\n"
      "\t'run_mode' : 'production',\n"
      "\t'Q' : [1e-4, 5e-5, 1e-5, 1e-6, 1e-4, 1e-4],\n"
      "\t'P0' : [0.01, 0.01, 0.01, 0.01, 0.1, 0.1],\n"
      "\t'covariates' : [" (str/join (lists/map (fn (c) ["\"" c "\""]) covariates) ", ") "],\n",
      "\t'assimilation_time_window' : 3600\n"
      "}\n" ])))


(defn station-info-to-string (st-info)
  (let ({:rawsinfo st-code name lat lon elevation sensors} st-info)
    (lists/flatten [
      "# Info written by wrfx2 RAWS subsystem\n"
      (iol/format "~s~n" [st-code])
      "# Station name\n"
      (iol/format "~s~n" [name])
      "# Station geo location (lat lon)\n"
      (iol/format "~w, ~w~n" [lat lon])
      "# Elevation (meters)\n"
      (iol/format "~w~n" [elevation])
      "# Station sensors\n"
      (string/join sensors ", ")
      "\n"])))


(defn obs-to-str (obs)
  "Convert an observation, which may be :na (not available) to a string.
   :na -> nan, numbers are converted to string."
  (case obs
    (:na
      "nan")
    (int-obs (when (erl/is-integer obs))
      (erl/integer-to-list int-obs))
    (float-obs (when (erl/is-number obs))
      (iol/format "~f" [obs]))))


(defn station-obs-to-string (observations)
  "Construct a string that can be directly written to an .obs file."
  (lists/flatten
    "# Data file generated by wrfx2 RAWS subsystem\n"
    (lists/map (fn (obs)
                  (let ({date obs-lst}                obs
                        {obs-names obs-vals obs-vars} (lists/unzip3 obs-lst))
                    [(ta/to-esmf-str date) " GMT\n"
                     (string/join obs-names ", ") "\n"
                     (string/join (lists/map obs-to-str/1 obs-vals) ", ") "\n"
                     (string/join (lists/map obs-to-str/1 obs-vars) ", ") "\n"]))
                observations)))


(defn+ write-raws-info-and-obs (station-data data-dir)
  (let ({st-info obss} station-data
        st-code        (erl/element 2 st-info))
    (file/write-file (filename/join data-dir (lists/append st-code ".info"))
                     (station-info-to-string st-info))
    (file/write-file (filename/join data-dir (lists/append st-code ".obs"))
                     (station-obs-to-string (lists/filter (fn (x) (case x (:na :false) (valid :true))) obss)))))


(defn+ load-station-list (fname)
  "Load a list of stations from file.  One station per line."
  (let ({ok bin} (file/read-file fname))
    (str/tokens (erl/binary-to-list bin) " \t\n")))



