(ns ext-job
    (require lists filename io os plist
             (file :joxify)
             (filelib :joxify)
             (string :as str)
             (io_lib :as iol)
             (erlang :as erl :joxify))
    (use utils joxa-core ext-utils))


;; construct an job script
(defn+ make-script (tid cmd num-nodes wall-time-hrs output-spec)
  (iol/format
   (lists/flatten
    [ "#!/usr/bin/env bash\n"
      "CMD=~p\n"
      "TID=~p\n"
      "echo \"date +%s\" > $TID.submit\n"
      "PIDFILE=$TID.pid\n"
      "DONEFILE=$TID.exitcode\n"
      "#PBS -l nodes=~p:ppn=12\n"
      "#PBS -l walltime=~p:00:00\n"
      "#PBS -N ~p\n"
      (iol/format "#PBS -o ~p\n" [(plist/get 1 output-spec)])
      (iol/format "#PBS -e ~p\n" [(plist/get 2 output-spec)])
      "cd $PBS_O_WORKDIR"
      (lists/map (fnm1 {_fd tgt} (iol/format "touch ~s~n" [tgt])) output-spec)
      ; the following two lines construct the mpirun command
      "mpirun -np ~p -hostfile $PBS_NODEFILE " cmd " &\n"
      "PID=$!\n"
      "echo $PID > $PIDFILE\n"
      "wait $PID\n"
      "echo $? > $DONEFILE\n"]) [cmd tid num-nodes wall-time-hrs tid (erl/* num-nodes 12)]))


(defn+ execute (tid command output-spec in-dir num-nodes wall-time-hrs pid-timeout exec-timeout log-f)
  (let ([pid-f exit-code-f submit-f] (make-proc-names in-dir tid [".pid" ".exitcode" ".submit"]))
    (case (read-int-from-file exit-code-f)
      (:invalid
        (log-f :info ["~s: no exit code found, will check pid file ~s" tid pid-f])
        (case (read-int-from-file pid-f)
          (:invalid
            (log-f :info ["~s: no pid file found, checking for submission file ~p" tid submit-f])
            (if (filelib/is-regular submit-f)
              (do
                (log-f :info ["~s: job has already been submitted, waiting for pid file ~p to appear" tid pid-f])
                (begin-monitoring in-dir tid pid-timeout exec-timeout log-f))
              (do
                (log-f :info ["~s: job has not been submitted yet, submitting job now" tid])
                (let* (fqn (make-proc-file-name in-dir tid ".sh"))
                  (write-run-script fqn (make-script tid command num-nodes wall-time-hrs output-spec))
                  (erl/open-port {:spawn (lists/flatten ["qsub " fqn])} [{:cd in-dir}])
                  (begin-monitoring in-dir tid pid-timeout exec-timeout log-f)))))
          (os-pid
            (log-f :info ["~s: found pid file (but there was no exit code file), process ~p must still be active" tid os-pid])
            (begin-monitoring in-dir tid pid-timeout exec-timeout log-f))))
      (exit-code
        ;; just return the exit code we already obtained
        (log-f :info ["~s: exit code ~p found, returning immediately" tid exit-code])
        {:success exit-code}))))

