(ns wrfx2-app
    (require
       inets io (file :joxify) filename crypto
       (application :joxify)
       (mnesia :joxify)
       ingest-srv
       log-srv
       utils
       config-srv
       (io_lib :as iol)
       (erlang :as erl :joxify)
       (filelib :joxify)
       (joxa-core :as jxc)))


(defn+ start-logging ()
  "Start the logging subsystem."
  (let* (log-dir (config-srv/get-conf :logging-dir))
    (utils/critical-check :ok (filelib/ensure-dir (filename/join [log-dir "log-file"])))
    (log-srv/start-link log-dir)))


(defn+ start-ingest-system ()
  "Start up the ingest system."
  (let* (ingest-dir (config-srv/get-conf :ingest-storage-dir))
    (utils/critical-check :ok (filelib/ensure-dir (filename/join [ingest-dir "fake-file"])))
    (log-srv/create-log "ingest-system" [])
    (ingest-srv/start-link ingest-dir (log-srv/get-log-f "ingest-system"))
    (utils/ensure-table-exists [:mwestraws :ts-and-stcode-tuple :obs-time :observations] [])))


(defn+ start-otp-subsystem ()
  "Start the OTP subsystems required for wrfx2 platform services."
  (inets/start)
  (mnesia/create-schema [(erl/node)])
  (mnesia/start)
  (crypto/start))


(defn+ start ()
  ; start the configuation server
  (config-srv/start-link)
  ; sset the mnesia database dir from config (before starting mnesia!)
  (application/set-env :mnesia :dir (config-srv/get-conf :mnesia-dir))
  ; start otp subsystems that we need
  (start-otp-subsystem)
  ; start logging subsystem
  (start-logging)
  ; start the ingest system
  (start-ingest-system)

  ; start the job manager

  ; start the scheduler

  )


