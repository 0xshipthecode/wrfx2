(ns sysmon
  (require (plist :joxify) os (dict :joxify) gen_server (erlang :as erl :joxify) 
           (calendar :as cal :joxify) (string :as str) (configsrv :joxify) utils)
  (use joxa-core))


; API

(defn+ start-link ()
  "Start the sysmon server.  Either starts up succesfully or throws an error."
  (let* (host (os/cmd "hostname")
         now  (cal/local-time)
         count-nodes (configsrv/get-conf :sysdiag_get_nodes)
         free-nodes  (configsrv/get-conf :sysdiag_get_free_nodes)
         queue-len   (configsrv/get-conf :sysdiag_qlen)
         cmds        [count-nodes free-nodes queue-len])
    (case (gen_server/start_link {:global :sysmon} :sysmon { cmds [{:host host} {:lastupdated now}] } [])
      ({:ok _} :ok)
      (error (erl/throw {"error starting the sysmon server" error})))))


(defn+ getstate ()
  "Returns the current server state as a plist."
  (gen_server/call {:global :sysmon} :getstate))


; Internal


(defn get-cmd-output (cmd)
  (str/strip (os/cmd cmd) :right 10))


(defn update-state (state)
  (let ({cmds ss}        state
        [count-nodes-cmd free-nodes-cmd qlen-cmd] cmds)
    (try*
      (let* (total-nodes (erl/list-to-integer (get-cmd-output count-nodes-cmd))
             free-nodes  (erl/list-to-integer (get-cmd-output free-nodes-cmd))
             queue-len   (erl/list-to-integer (get-cmd-output qlen-cmd))
             now         (cal/local-time))
	{cmds (plist/update-with [{:nodes total-nodes} {:freenodes free-nodes}
                            {:qlen queue-len}
                            {:lastupdated now}] ss)})
    (catch (type body)
      (do
        (utils/log-error "sysmon: failed to update state, exception ~p with body ~p, stack trace ~p" [type body (erl/get-stacktrace)])
        state))))
        )

; gen_server callbacks

(defn+ init (args)
    (erl/send-after 10000 (erl/self) :updatestate)
    {:ok args})


(defn+ handle_call (request from state)
  (let ({cmds ss} state)
    (case request
      (:getstate
        {:reply ss state})
      (other {:reply :invalid-request state}))))


(defn+ handle_cast (msg state)
  {:noreply state})


(defn+ handle_info (info state)
  (case info
    (:updatestate
      (erl/send-after 10000 (erl/self) :updatestate)
      {:noreply (update-state state)})
    (other
      {:noreply state})))


(defn+ terminate (reason state)
  :ok)


(defn+ code_change (old-vsn state extra)
  {:ok state})

