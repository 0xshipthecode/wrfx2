; Copyright (C) 2013-2014 Martin Vejmelka, UC Denver
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
; of the Software, and to permit persons to whom the Software is furnished to do
; so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
; A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(ns fdjob
  (require wrfxlib nlist nllib plist filesys ext-wrappers logsrv io
           configsrv wrf-monitor jobmaster grib_ingest raws_ingest lists
           (steward_utils :as sutils :joxify) 
           (timelib :as ta) os (io_lib :as iol) (string :as str) filename fmda
           (file :joxify) (erlang :as erl :joxify) (filelib :joxify))
  (use joxa-core utils))


(defn+ run (args log-f)
  "Execute the fire danger job with the given arguments:
   sim-from: simulate from
   forecast-length-hrs: hours to run from sim-from
   uuid: unique identifier of the job
   work-dir: working directory
   wrf-inst-dir: WRF installation directory
   wps-inst-dir: WPS installation directory
   wps-geog-dir: WPS geography data directory
   grib-src-name: name of the GRIB source"
  (let* (uuid         (plist/get :uuid args)
         work-dir       (plist/get :work-dir args)
         wps-idir       (plist/get :wps-install-dir args)
         wrf-idir       (plist/get :wrf-install-dir args)
         grib-src-name  (plist/get :grib-src-name args)
         raws-src-name  (plist/get :raws-src-name args)
         geogrid-tbl    (plist/get :geogrid-tbl args)
         sim-from       (plist/get :sim-from args)
         fc-hrs         (plist/get :forecast-length-hrs args)
         num-nodes      (plist/get :num-nodes args)
         ppn            (plist/get :ppn args)
         wall-time-hrs  (plist/get :wall-time-hrs args)
         hist-ints      (plist/get :history-interval args)
         grib-info      (grib_ingest/get_grib_info grib-src-name)
         station-list-f (plist/get :station-list-file args)
         station-list   (fmda/load-station-list station-list-f)
         sim-to         (ta/shift-by-hours sim-from fc-hrs)
         wps-wdir       (filename/join work-dir "wps")
         wrf-wdir       (filename/join work-dir "wrf")
         fmda-wdir      (filename/join work-dir "fmda")
         wps-nl0        (nlist/parse (plist/get :wps-nl args) :weather-sim-wps)
         wrf-nl0        (nlist/parse (plist/get :wrf-nl args) :weather-sim-wrf)
         all-doms       (nlist/all-domains wps-nl0))

    (log-f :info "fdjob [~p] work-dir ~p sim-from ~w sim-to ~w~n" [uuid work-dir sim-from sim-to])

    ; create the working directory for WPS
    (!!= :ok (wrfxlib/clone-wps wps-idir wps-wdir (plist/get :vtable_file grib-info) geogrid-tbl []))

    ; step 1: edit WPS namelist and run geogrid
    (jobmaster/updatestate uuid [{:stage "GEOGRID (1/8)"}])
    (let* (wps-nl1 (nllib/make-geogrid-namelist wps-wdir args wps-nl0)
           wps-nl-name (filename/join wps-wdir "namelist.wps"))
      (log-f :info "fdjob [~p] writing namelist.wps for geogrid" [uuid])
      (!!= :ok (file/write-file wps-nl-name (nlist/render-namelists wps-nl1)))
      (wrfxlib/run-geogrid wps-wdir log-f)

      ; step 2: retrieve GRIBs and add ungrib-specific entries to namelist and store it
      (jobmaster/updatestate uuid [{:stage "GRIB retrieval (2/8)"}])
      (log-f :info "fdjob [~p] retrieving GRIB files for the simulation extent ~w to ~w" [uuid sim-from sim-to])
      (let (strategy                [{:use_grib_source grib-src-name},:try_retrieve,{:wait_for_mins,5},:try_retrieve]
            {cov-from cov-to mfest} (grib_ingest/retrieve_gribs sim-from sim-to sim-from strategy)
            wps-nl2                 (nllib/make-ungrib-namelist cov-from cov-to all-doms wps-nl1))
        (!!= :ok (file/write-file wps-nl-name (nlist/render-namelists wps-nl2)))
        (wrfxlib/symlink-grib-files mfest wps-wdir)
        (log-f :info "fdjob [~p] writing amended namelist.wps for ungrib.exe" [uuid])))

    ; step 3: run ungrib & metgrid
    (jobmaster/updatestate uuid [{:stage "UNGRIB (3/8)"}])
    (wrfxlib/run-ungrib wps-wdir log-f)

    (jobmaster/updatestate uuid [{:stage "METGRID (4/8)"}])
    (wrfxlib/run-metgrid wps-wdir log-f)

    ; step 4: setup the WRF working directory
    (log-f :info "fdjob [~p]: creating WRF working directory" [uuid])
    (wrfxlib/clone-wrf wrf-idir wrf-wdir [])

    ; step 5: symlink all met_em* files to the wrfdir
    (let* (met-em-files (filesys/list-dir-regexp wps-wdir "met_em.+"))
      (log-f :info "fdjob [~p] symlinking ~p met_em* files to the wrf dir." [uuid (erl/length met-em-files)])
      (!!= :ok (filesys/symlink-files-to-dir met-em-files wps-wdir wrf-wdir)))

    ; step 6: construct the WRF namelist
    (let* (nl-keys (plist/get :wrf_namelist_keys grib-info)
           wrf-nl1 (nllib/make-wrf-namelist sim-from sim-to nl-keys hist-ints all-doms wrf-nl0))
      (log-f :info "fdjob [~p] writing namelist.input for WRF" [uuid])
      (!!= :ok (file/write-file (filename/join wrf-wdir "namelist.input") (nlist/render-namelists wrf-nl1))))

    ;step 7: run real.exe
    (jobmaster/updatestate uuid [{:stage "REAL (5/8)"}])
    (wrfxlib/run-real wrf-wdir log-f)

    ; step 9: run WRF
    (log-f :info "fdjob [~p] running WRF" [uuid])
    (jobmaster/updatestate uuid [{:stage "WRF (6/8)"}])
    (let* (wrf-history-hook
            (fn (domain-id sim-time)
              (log-f :info "fdjob detected WRF history write at ~w in domain ~p" [sim-time domain-id])
              (when (erl/== domain-id 1)
                (log-f :info "fdjob simulation info - ~p percent done, acceleration ~p time to go ~p completion at ~w"
                             (plist/get-list [:percent-done :sim-acceleration :seconds-to-finish :completion-time]
                                              :not-available (jobmaster/getstate uuid)))))
           cfl-violation-hook
            (fn (ext-mon-pid)
              (log-f :error "fdjob detected CFL violation, terminating WRF job." [])
              (erl/send ext-mon-pid {:kill :cfl-violation-detected})))

      (wrfxlib/run-wrf uuid wrf-wdir num-nodes ppn wall-time-hrs sim-from sim-to
                    300 wrf-history-hook cfl-violation-hook log-f))

    ; step 10: retrieve FMDA data (do this 'almost' last so that we have the freshest data)
    (jobmaster/updatestate uuid [{:stage "Retrieving RAWS observations (7/8)"}])
    (let ({:ok sysdir} (file/get-cwd))
      (!!= :ok (filesys/clone-with-files (filename/join sysdir "deps/fmda") fmda-wdir [ "src" "fmda_auto.sh"])))
    (let* (data-dir (filename/join fmda-wdir "data"))
      (!!= :ok (filesys/create-dir data-dir))
      (let* (now-time       (ta/round-hours (ta/shift-by-hours (ta/universal-time) -1) :down)
             raws-max-time  (ta/min-time now-time sim-to))
        (let* (st-data (raws_ingest/retrieve_observations station-list [:fm10] {sim-from raws-max-time}))
            (fmda/write-raws-info-and-obs st-data data-dir))))

    ; step 12: run external fuel moisture code
    (jobmaster/updatestate uuid [{:stage "FMDA (8/8)"}])

    (let* (wrfout-path (erl/++ "../wrf/wrfout_d03_" (ta/to-esmf-str sim-from))
           cfg-path    (filename/join fmda-wdir "fmda.cfg"))
      (fmda/write-fmda-cfg (erl/++ "../../../"  station-list-f) wrfout-path ["constant" "elevation" "pressure" "temperature" "lon" "lat" "rain"] cfg-path))
    (ext-wrappers/run-process "fmda" "PYTHONPATH=src python src/fmda.py fmda.cfg" (sutils/make-std-output-spec fmda-wdir "fmda") fmda-wdir 1200000 log-f
                              0 (fn () :passed) 1)

    ; step 13: postprocess and store all results somewhere
    (log-f :info "fdjob [~p] end of job reached successfully" [uuid])
    (jobmaster/updatestate uuid [{:stage "COMPLETE"} {:percent-done 100.0}])

    :ok))


(defn+ test ()
  (let* (uuid "25b55327-2c43-4d62-beb9-a314ccf91c9f")
    (jobmaster/submit uuid :fdjob
        [{:history-interval [60 60 30]}
         {:wrf-install-dir (configsrv/get-conf :wrf-install-dir)}
         {:wps-install-dir (configsrv/get-conf :wps-install-dir)}
         {:wps-geog-dir (configsrv/get-conf :wps-geog-dir)}
         {:grib-src-name "nam_218"}
         {:geogrid-tbl "geogrid/GEOGRID.TBL.ARW"}
         {:raws-src-name "mesowest"}
         {:station-list-file "etc/colo_station_list"}
         {:sim-from {{2014 1 10} {0 0 0}}}
         {:wps-nl "etc/nlists/colo_3dom.wps"}
         {:wrf-nl "etc/nlists/colo_3dom.input"}
         {:num-nodes 12} {:ppn 12} {:wall-time-hrs 6} {:forecast-length-hrs 24} ])))

(defn+ test (sim-from)
  (let* (uuid (make-uuid))
    (jobmaster/submit uuid :fdjob
        [{:history-interval [60 60 30]}
         {:wrf-install-dir (configsrv/get-conf :wrf-install-dir)}
         {:wps-install-dir (configsrv/get-conf :wps-install-dir)}
         {:wps-geog-dir (configsrv/get-conf :wps-geog-dir)}
         {:grib-src-name "nam_218"}
         {:raws-src-name "mesowest"}
         {:geogrid-tbl "geogrid/GEOGRID.TBL.ARW"}
         {:station-list-file "etc/colo_station_list"}
         {:sim-from sim-from}
         {:wps-nl "etc/nlists/colo_3dom.wps"}
         {:wrf-nl "etc/nlists/colo_3dom.input"}
         {:num-nodes 12} {:ppn 12} {:wall-time-hrs 6} {:forecast-length-hrs 24} ])))

