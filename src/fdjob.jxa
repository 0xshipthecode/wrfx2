; Copyright (C) 2013 Martin Vejmelka, UC Denver
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
; of the Software, and to permit persons to whom the Software is furnished to do
; so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
; A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(ns fdjob
  (require wrfxlib nlist nllib plist filesys ext-utils ext-job logsrv io
           configsrv wrf-monitor jobmaster ingest-srv grib-src-def
           (timelib :as ta) os (io_lib :as iol) (string :as str) filename
           (file :joxify) (erlang :as erl :joxify) (filelib :joxify))
  (use joxa-core utils))


(defn+ run (args log-f)
  "Execute the fire danger job with the given arguments:
   sim-from: simulate from
   forecast-length-hrs: hours to run from sim-from
   job-id: unique identifier of the job
   work-dir: working directory
   wrf-inst-dir: WRF installation directory
   wps-inst-dir: WPS installation directory
   wps-geog-dir: WPS geography data directory
   grib-src-name: name of the GRIB source"
  (let* (job-id         (plist/get :job-id args)
         short-jid      (plist/get :short-job-id args)
         work-dir       (plist/get :work-dir args)
         wps-idir       (plist/get :wps-install-dir args)
         wrf-idir       (plist/get :wrf-install-dir args)
         grib-src-name  (plist/get :grib-src-name args)
         raws-src-name  (plist/get :raws-src-name args)
         sim-from       (plist/get :sim-from args)
         fc-hrs         (plist/get :forecast-length-hrs args)
         num-nodes      (plist/get :num-nodes args)
         ppn            (plist/get :ppn args)
         wall-time-hrs  (plist/get :wall-time-hrs args)
         hist-ints      (plist/get :history-interval args)
         grib-src       (ingest-srv/get-grib-def grib-src-name)
         station-list   (plist/get :station-list args)
         sim-to         (ta/shift-by-hours sim-from fc-hrs)
         wps-wdir       (filename/join work-dir "wps")
         wrf-wdir       (filename/join work-dir "wrf")
         fmda-wdir      (filename/join work-dir "fmda")
         wps-nl0        (nlist/parse (plist/get :wps-nl args) :weather-sim-wps)
         wrf-nl0        (nlist/parse (plist/get :wrf-nl args) :weather-sim-wrf)
         all-doms       (nlist/all-domains wps-nl0))

    (log-f :info "fdjob [~p] work-dir ~p sim-from ~w sim-to ~w~n" [job-id work-dir sim-from sim-to])

    ; create the working directory for WPS
    (!!= :ok (filesys/create-dir work-dir))
    (!!= :ok (wrfxlib/clone-wps wps-idir wps-wdir "ungrib/Variable_Tables/Vtable.NAM" []))

    ; step 1: edit WPS namelist and run geogrid
    (let* (wps-nl1 (nllib/make-geogrid-namelist wps-wdir args wps-nl0)
           wps-nl-name (filename/join wps-wdir "namelist.wps"))
      (log-f :info "fdjob [~p] writing namelist.wps for geogrid" [short-jid])
      (!!= :ok (file/write-file wps-nl-name (nlist/render-namelists wps-nl1)))
      (jobmaster/updatestate job-id [{:stage "GEOGRID (1/6)"}])
      (wrfxlib/run-geogrid wps-wdir log-f)

      ; step 2: retrieve GRIBs and add ungrib-specific entries to namelist and store it
      (jobmaster/updatestate job-id [{:stage "GRIB retrieval (2/6)"}])
      (log-f :info "fdjob [~p] retrieving GRIB files for the simulation extent ~w to ~w" [short-jid sim-from sim-to])
      (let ({cov-from cov-to mfest}  (ingest-srv/retrieve-gribs grib-src-name sim-from sim-to sim-from 3600)
             wps-nl2                 (nllib/make-ungrib-namelist cov-from cov-to all-doms wps-nl1))
        (!!= :ok (file/write-file wps-nl-name (nlist/render-namelists wps-nl2)))
        (wrfxlib/symlink-grib-files mfest wps-wdir)
        (log-f :info "fdjob [~p] writing amended namelist.wps for ungrib.exe" [short-jid])))

    ; step 3: run ungrib & metgrid
    (jobmaster/updatestate job-id [{:stage "UNGRIB (3/6)"}])
    (wrfxlib/run-ungrib wps-wdir log-f)
    (jobmaster/updatestate job-id [{:stage "METGRID (4/6)"}])
    (wrfxlib/run-metgrid wps-wdir log-f)

    ; step 4: setup the WRF working directory
    (log-f :info "fdjob [~p]: creating WRF working directory" [short-jid])
    (wrfxlib/clone-wrf wrf-idir wrf-wdir)

    ; step 5: symlink all met_em* files to the wrfdir
    (let* (met-em-files (filesys/list-dir-regexp wps-wdir "met_em.+"))
      (log-f :info "fdjob [~p] symlinking ~p met_em* files to the wrf dir." [short-jid (erl/length met-em-files)])
      (!!= :ok (filesys/symlink-files-to-dir met-em-files wps-wdir wrf-wdir)))

    ; step 6: construct the WRF namelist
    (let* (wrf-nl1 (nllib/make-wrf-namelist sim-from sim-to grib-src hist-ints all-doms wrf-nl0))
      (log-f :info "fdjob [~p] writing namelist.input for WRF" [short-jid])
      (!!= :ok (file/write-file (filename/join wrf-wdir "namelist.input") (nlist/render-namelists wrf-nl1))))

    ;step 7: run real.exe
    (jobmaster/updatestate job-id [{:stage "REAL (5/6)"}])
    (wrfxlib/run-real wrf-wdir log-f)

    ; step 8: asynchronously run the acquisition of the fuel moisture measurements
;    (let* (raws-max-time (timelib/round-hours (timelib/shift-by-hours (timelib/universal-time) -1) :down))
;      (async-send-me {:raws-ingest-done (ingest-srv/retrieve-raws-obs raws-src-name station-list sim-from raws-max-time 800)}))

    ; step 9: run WRF
    (log-f :info "fdjob [~p] running WRF" [short-jid])
    (jobmaster/updatestate job-id [{:stage "WRF (6/6)"}])
    (let* (wrf-history-hook
            (fn (domain-id sim-time)
              (log-f :info "fdjob detected WRF history write at ~w in domain ~p" [sim-time domain-id])
              (when (erl/== domain-id 1)
                (log-f :info "fdjob simulation info - ~p percent done, acceleration ~p time to go ~p completion at ~w"
                             (plist/get-list [:percent-done :sim-acceleration :seconds-to-finish :completion-time]
                                              :not-available (jobmaster/getstate job-id)))))
           cfl-violation-hook
            (fn (ext-mon-pid)
              (log-f :error "fdjob detected CFL violation, terminating WRF job." [])
              (erl/send ext-mon-pid {:kill :cfl-violation-detected})))

      (wrfxlib/run-wrf job-id wrf-wdir num-nodes ppn wall-time-hrs sim-from sim-to
                    300 wrf-history-hook cfl-violation-hook log-f))

    ; step 10: wait for RAWS retrieval completion
;    (receive
;      ({:raws-ingest-done data}
;        :ok)
;      ({:kill with-reason}
;        (erl/throw {:killed with-reason})))

    ; step 11: write all info and obs files into the directory
    (!!= :ok (filesys/create-dir fmda-wdir))
    (!!= :ok (filesys/create-dir (filename/join fmda-wdir "data")))

    ; step 12: run external fuel moisture code

    ; step 13: store all results somewhere

    (log-f :info "fdjob [~p] end of job reached successfully" [short-jid])
    (jobmaster/updatestate job-id [{:stage "COMPLETE"} {:percent-done 100.0}])

    :ok))


(defn+ test ()
  (let* (uuid "25b55327-2c43-4d62-beb9-a314ccf91c9f")
    (jobmaster/submit uuid :fdjob
        [{:history-interval [60 30 15]}
         {:work-dir (filename/join (configsrv/get-conf :workspace-dir) uuid)}
         {:wrf-install-dir (configsrv/get-conf :wrf-install-dir)}
         {:wps-install-dir (configsrv/get-conf :wps-install-dir)}
         {:wps-geog-dir (configsrv/get-conf :wps-geog-dir)}
         {:grib-src-name "nam_218"}
         {:raws-src-name "mesowest"}
         {:station-list ["ESPC2" "HACC2"]}
         {:sim-from {{2014 1 10} {0 0 0}}}
         {:wps-nl "etc/nlists/colo_3dom.wps"}
         {:wrf-nl "etc/nlists/colo_3dom.input"}
         {:num-nodes 12} {:ppn 12} {:wall-time-hrs 4} {:forecast-length-hrs 24} ])))


(defn+ test (from)
  (let* (uuid "25b55327-2c43-4d62-beb9-a314ccf91c9f")
    (jobmaster/submit uuid :wfc-job 
        [{:sim-from from}
         {:wps-nl "etc/nlists/colo_3dom.wps"}
         {:wrf-nl "etc/nlists/colo_3dom.input"}
         {:num-nodes 12} {:ppn 12} {:wall-time-hrs 4} {:forecast-length-hrs 10} ])))

