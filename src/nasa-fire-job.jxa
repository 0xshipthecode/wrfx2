(ns nasa-fire-job
  (require wrfxlib nlist plist filesys logsrv configsrv jobmaster
           (timelib :as ta) os (io_lib :as iol) (filelib :joxify) postproc
           (string :as str) filename (file :joxify) (erlang :as erl :joxify) lists)
  (use joxa-core utils))


(defn make-wrf-namelist (sim-from sim-to ign-specs nls0)
  "Write in the simulation time <sim-from> to <sim-to> into <nls0> and add anything
   the grib source needs."
  (lists/foldl (fn (x nls) (x nls)) nls0
    [ (fn (nls) (nlist/set-wrf-start-time nls sim-from [1 2]))
      (fn (nls) (nlist/set-wrf-end-time nls sim-to [1 2]))
      (fn (nls) (nlist/set-wrf-run-time nls sim-from sim-to))
      (fn (nls) (nlist/set-entry "time_control" "history_interval" [30 15] nls))
      (fn (nls) (nlist/set-ignitions nls ign-specs 2)) ]))


(defn+ run (args log-f)
  "Execute the fire-simulation job with the given arguments:
   sim-from: when to start the simulation
   ign-specs: a list of ignition specifications
   uuid: unique identifier of the job
   work-dir: working directory
   wrf-inst-dir: WRF installation directory
   wps-geog-dir: WPS geography data directory
   grib-src-name: name of the GRIB source"
  (let* (uuid         (plist/get :uuid args)
         short-jid      (plist/get :short-uuid args)
         work-dir       (plist/get :work-dir args)
         wrf-idir       (plist/get :wrf-install-dir args)
         ign-specs      (plist/get :ign-specs args)
         num-nodes      (plist/get :num-nodes args)
         ppn            (plist/get :ppn args)
         fc-hrs         (plist/get :forecast-length-hrs args)
         wall-time-hrs  (plist/get :wall-time-hrs args)
         sim-from       (plist/get :sim-from args)
         sim-to         (ta/shift-by-hours sim-from fc-hrs)
         wrf-wdir       (filename/join work-dir "wrf")
         wrf-nl0        (nlist/parse "etc/nlists/nasa-fs.input" :nasa_fs_wrf0)
         fire-nl0       (nlist/parse "etc/nlists/nasa-fs.fire" :nasa_fs_fire0)
         all-doms       (nlist/all-domains wrf-nl0))

    (log-f :info "nasa-fire-job [~p] work-dir ~p sim-from ~w sim-to ~w~n" [uuid work-dir sim-from sim-to])

    ; step 1: setup the WRF working directory
    (wrfxlib/clone-wrf wrf-idir wrf-wdir)
    (log-f :info "nasa-fire-job [~p]: created WRF working directory" [short-jid])

    ; step 2: symlink wrfinputs to WRF
    (let ({:ok cwd} (file/get-cwd))
      (!!= :ok (filesys/symlink-files-to-dir ["wrfinput_d01" "wrfinput_d02" "wrfbdy_d01"]
                                             (filename/join cwd "precomputed/nasa-fire-job")
                                             wrf-wdir)))
    (log-f :info "nasa-fire-job [~p]: symlinked precomputed files" [short-jid])

    ; step 3: construct the WRF namelist (ignition when/where, etc.) and write it, write namelist.fire (no changes)
    (let* (wrf-nl1 (make-wrf-namelist sim-from sim-to ign-specs wrf-nl0))
      (log-f :info "nasa-fire-job [~p] writing namelist.input for WRF" [short-jid])
      (!!= :ok (file/write-file (filename/join wrf-wdir "namelist.input") (nlist/render-namelists wrf-nl1))))

    (!!= {:ok _} (file/copy "etc/nlists/nasa-fs.fire" (filename/join wrf-wdir "namelist.fire"))) 

    ; step 4: run WRF
    (log-f :info "nasa-fire-job [~p] running WRF" [short-jid])
    (jobmaster/updatestate uuid [:stage "WRF"])
    (let* (wrf-history-hook
            (fn (domain-id sim-time)
              (when (erl/== domain-id 2)
                (postproc/write-contour-kmz-file uuid wrf-wdir sim-from sim-time ["FIRE_AREA"] log-f)))
           cfl-violation-hook
            (fn (ext-mon-pid)
              (log-f :error "nasa-fire-job detected CFL violation, terminating WRF job." [])
              (erl/send ext-mon-pid {:kill :cfl-violation-detected})))
      (wrfxlib/run-wrf uuid wrf-wdir num-nodes ppn wall-time-hrs sim-from sim-to 120 wrf-history-hook cfl-violation-hook log-f))

    (log-f :info "nasa-fire-job [~p] end of job reached" [short-jid])

    (jobmaster/updatestate uuid [{:stage "COMPLETE"} {:percent-done 100.0}])

    :ok))



(defn+ test (fc-len wall-time-hrs)
  (let* (uuid "35b55327-2c43-4d62-beb9-a314ccf91c9f")
    (jobmaster/submit uuid :nasa-fire-job 
         [{:wrf-install-dir (configsrv/get-conf :wrf-install-dir)}
         {:ign-specs [ {{47.913  -119.116} {10800 100}}
                       {{48.0271149 -119.39029} {8599 100}}
                       {{48.0313339 -119.3838} {8523 100}}
                       {{48.0315704 -119.3807} {8523 100}}
                       {{48.0265465 -119.38021} {8523 100}} ]}
         {:sim-from {{2012 9 9} {0 0 0}}} {:num-nodes 12} {:ppn 12}
         {:wall-time-hrs wall-time-hrs} {:forecast-length-hrs fc-len}])))


(defn+ test-colibri (fc-len wall-time-hrs)
  (let* (uuid "35b55327-2c43-4d62-beb9-a314ccf91c9f")
    (jobmaster/submit uuid :nasa-fire-job
        [{:ign-specs [ {{47.913  -119.116} {10800 100}}
                       {{48.0271149 -119.39029} {8599 100}}
                       {{48.0313339 -119.3838} {8523 100}}
                       {{48.0315704 -119.3807} {8523 100}}
                       {{48.0265465 -119.38021} {8523 100}} ]}
         {:sim-from {{2012 9 9} {0 0 0}}} {:num-nodes 16} {:ppn 16}
         {:wall-time-hrs wall-time-hrs} {:forecast-length-hrs fc-len}])))


