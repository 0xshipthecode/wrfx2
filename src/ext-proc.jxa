(ns ext-proc
    (require file lists filename io os
             (string :as str)
             (io_lib :as iol)
             (erlang :as erl :joxify))
    (use utils joxa-core ext-utils))


;; construct an immediate run script
(defn+ make-immed-exec-script (tid cmd output-spec)
  (iol/format
   (lists/flatten
    [ "#!/usr/bin/env bash\n"
      "CMD=~p\n"
      "TID=~p\n"
      "PIDFILE=\"$TID.pid\"\n"
      "DONEFILE=\"$TID.exitcode\"\n"
      (lists/map (fnm1 {_fd tgt} (iol/format "touch ~s~n" [tgt])) output-spec)
      cmd (lists/map (fnm1 {fd tgt} (iol/format " ~p>> ~s" [fd tgt])) output-spec) " &\n"
      "PID=$!\n"
      "echo $PID > $PIDFILE\n"
      "wait $PID\n"
      "echo $? > $DONEFILE\n"]) [cmd tid]))


;; execute a process denoted tid with a given timeout in a given directory
;; the execute function either returns {:success exit-code} if process need not
;; be executed or {:running pid} if the process was executed and running
;; in this case, the process termination is transmitted to the caller as
;; {:ext-proc-complete task-pid {result message}} where result is either :success or :failure
(defn+ execute (tid command output-spec in-dir exec-timeout log-f)
  ;; check if the command has already been run (exitcode file exists)
  (let ([pid-f exit-code-f] (make-proc-names in-dir tid [".pid" ".exitcode"]))
    (case (read-int-from-file exit-code-f)
      (:invalid
        (log-f :info ["~s: no exit code found, will check pid file ~s" tid pid-f])
        (case (read-int-from-file pid-f)
          (:invalid
            (log-f :info ["~s: no pid file found, process ~p must be started" tid command])
            (let* (fqn (make-proc-file-name in-dir tid ".sh"))
              (write-run-script fqn (make-immed-exec-script tid command output-spec))
              (execute-script tid fqn in-dir 5000 exec-timeout log-f)))
          (os-pid
            (log-f :info ["~s: found pid file (but there was no exit code file), process ~p must still be active" tid os-pid])
            ; begin monitoring will again look for the pid file, find it right away and start looking for the exit-code file
            (begin-monitoring in-dir tid 5000 exec-timeout log-f))))
      (exit-code
        ;; just return the exit code we already obtained
        (log-f :info ["~s: exit code ~p found, returning immediately" tid exit-code])
        {:success exit-code}))))


