(ns log-srv
  (require io
           dict
           filename
           gen_server
           (erlang :as erl :joxify)
           (joxa-core :as jxc)
           log-stream))

;; API

(defn+ create-log (log-name additional-targets)
  "Create a new log stream with name <log-name> that is sent to log-dir/log-name.log
   and also to any <additional-targets>."
  (gen_server/call :log-srv {:create-log log-name :info additional-targets}))


(defn+ create-log (log-name min-priority additional-targets)
  "Create a new log stream with name <log-name> that is sent to log-dir/log-name.log
   and only routes messages with the given minimum priority."
   (gen_server/call :log-srv {:create-log log-name min-priority additional-targets}))


(defn+ get-log (log-name)
  "Retrieve the PID associated with the log <log-name>."
  (case (gen_server/call :log-srv {:get-log-pid log-name})
    ({:ok log-pid} log-pid)
    (error (erl/throw "invalid log name"))))


(defn+ get-log-f (log-name)
  "Retrieve a logging function for log <log-name>."
  (let* (log-pid (get-log log-name))
    (log-stream/make-log-func log-pid)))


(defn+ close-log (log-name)
  "Close the log <log-name>."
  (gen_server/call :log-srv {:close-log log-name}))


(defn+ start-link (log-dir)
  "Start the logging server and construct default log streams:
     'system' for general system messages
     'wrfx-errors' for all error messages (added as a target to all log streams)
     'wrfx-flash' for all flash priority messages (added as a target to all log streams)."
  ; ***** the logs wrfx_error and wrfx_flash *****
  ; MUST be created here and are *always* added :relay target to subsequently created logs
  (let* (err-file (filename/join log-dir "wrfx-errors.log")
         err-log (log-stream/start-log "wrfx-errors" [(log-stream/make-dev-target err-file)])
         flash-file (filename/join log-dir "wrfx-flash.log")
         flash-log (log-stream/start-log "wrfx-flash" [(log-stream/make-dev-target flash-file)]))
    (gen_server/start_link {:local :log-srv} :log-srv [log-dir (dict/new)] [])
    (gen_server/call :log-srv {:add-log-internal "wrfx-errors" err-log})
    (gen_server/call :log-srv {:add-log-internal "wrfx-flash" flash-log}))
    (create-log "system" []))

;; Internal funcrions

;; gen_server callbacks

(defn+ init (args)
    {:ok args})


(defn+ handle_call (request from state)
  (jxc/let ([log-dir log-map] state)
    (case request
      ; add a new log to the logging server (only used internally from this file)
      ({:add-log-internal log-name log-pid}
       {:reply :ok [log-dir (dict/store log-name log-pid log-map)]})
      ; create and manage a new log stream
      ({:create-log log-name min-priority additional-targets} 
        (let* (fname (filename/join [log-dir (erl/++ log-name ".log")])
               main-tgt (log-stream/make-dev-target fname)
               err-tgt (log-stream/make-relay-target (dict/fetch "wrfx-errors" log-map) :error)
               flash-tgt (log-stream/make-relay-target (dict/fetch "wrfx-flash" log-map) :flash)
               log-pid (log-stream/start-log log-name (main-tgt . (err-tgt . (flash-tgt . additional-targets)))))
          {:reply {:ok log-pid (log-stream/make-log-func log-pid)} [log-dir (dict/store log-name log-pid log-map)]}))
      ; retrieve the pid of a log with the given name
      ({:get-log-pid log-name}
        {:reply (dict/find log-name log-map) state})
      ; message not understood, this needs a flash priority notification
      ({:close-log log-name}
        (case (dict/find log-name log-map)
          ({:ok log-pid}
            (log-stream/close-log log-pid)
            (log-stream/stop-log log-pid)
            {:reply :ok [log-dir (dict/erase log-name log-map)]})
          (error
            {:reply :error state})))
      (other
        (log-stream/flash (dict/fetch "system" log-map) "log-srv: message ~p not understood, fix it!" other)
        {:reply :invalid-request state}))))

(defn+ handle_cast (msg state)
  {:noreply state})

(defn+ handle_info (info state)
  {:noreply state})

(defn+ terminate (reason state)
  (jxc/let ([log-dir log-map] state)
    (dict/map (fn (_ v) (log-stream/close-log v)) log-map))
  :ok)

(defn+ code_change (old-vsn state extra)
  {:ok state})

