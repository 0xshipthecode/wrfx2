; Copyright (C) 2014 Martin Vejmelka, UC Denver
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
; of the Software, and to permit persons to whom the Software is furnished to do
; so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
; A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(ns wfcjob
  (require (wrfxlib :joxify) (nlist :joxify) (nllib :joxify) plist (filesys :joxify) io (file :joxify)
           (configsrv :joxify) (jobmaster :joxify) grib_ingest (perftrack :joxify) postproc
           (timelib :as ta :joxify) os (io_lib :as iol) (string :as str) filename
           (file :joxify) (erlang :as erl :joxify) (filelib :joxify) lists)
  (use joxa-core utils))



(defn+ run (args log-f)
  "Execute wfcjob with the given arguments:
   sim-from: simulate from
   forecast-length-hrs: hours to run from sim-from
   uuid: unique identifier of the job
   work-dir: working directory
   wrf-inst-dir: WRF installation directory
   wps-inst-dir: WPS installation directory
   wps-geog-dir: WPS geography data directory
   grib-src-name: name of the GRIB source"
  (let* (uuid           (plist/get :uuid args)
         work-dir       (plist/get :work_dir args)
         wps-idir       (plist/get :wps_install_dir args)
         wrf-idir       (plist/get :wrf_install_dir args)
         grib-src-name  (plist/get :grib_source_name args)
         geogrid-tbl    (plist/get :geogrid_table args)
         sim-from       (plist/get :sim_from args)
         fc-hrs         (plist/get :forecast_length_hrs args)
         num-nodes      (plist/get :num_nodes args)
         ppn            (plist/get :ppn args)
         wall-time-hrs  (plist/get :wall_time_hrs args)
         hist-ints      (plist/get :history_interval args)
         grib-info      (grib_ingest/get_grib_info grib-src-name)
         sim-to         (ta/shift-by sim-from fc-hrs :hours)
         wps-wdir       (filename/join work-dir "wps")
         wrf-wdir       (filename/join work-dir "wrf")
         wps-nl0        (nlist/parse (plist/get :wps_nl args) :meteo_wps)
         wrf-nl0        (nlist/parse (plist/get :wrf_nl args) :meteo_wrf)
         all-doms       (nlist/all-domains wps-nl0))

    (log-f :info "job starting: work dir is ~p sim range [~w,~w]~n" [work-dir sim-from sim-to])
    ; create the working directory for WPS
    (!!= :ok (wrfxlib/clone-wps wps-idir wps-wdir (plist/get :vtable_file grib-info) geogrid-tbl []))

    ; step 1:  construct innermost domain from ignition point and add it to the namelist and run geogrid
    (let* (wps-nl1 (nllib/make-geogrid-namelist wps-wdir args wps-nl0)
           wps-nl-name (filename/join wps-wdir "namelist.wps"))
      (log-f :info "writing namelist.wps for geogrid" [])
      (!!= :ok (file/write-file wps-nl-name (nlist/render-namelists wps-nl1)))
      (jobmaster/updatestate uuid [{:stage "GEOGRID (1/6)"}])
      (perftrack/instrument-as :wfcjob uuid "geogrid" []
        (fn () (wrfxlib/run-geogrid wps-wdir log-f)))
      
      ; step 2: retrieve GRIBs and add ungrib-specific entries to namelist and store it
      (jobmaster/updatestate uuid [{:stage "GRIB retrieval (2/6)"}])
      (log-f :info "retrieving GRIB files for the simulation extent ~w to ~w" [sim-from sim-to])
      (let (strategy   [{:use_grib_source grib-src-name} :try_retrieve :shift_cycle :try_retrieve]
            at-time    (ta/min-time (ta/universal-time) sim-from)
            {:success cov-from cov-to mfest} (grib_ingest/retrieve_gribs sim-from sim-to at-time strategy)
            wps-nl2                 (nllib/make-ungrib-namelist cov-from cov-to all-doms wps-nl1))
        (log-f :info "received GRIB2 manifest ~p~n" [mfest])
        (!!= :ok (file/write-file wps-nl-name (nlist/render-namelists wps-nl2)))
        (wrfxlib/symlink-grib-files mfest wps-wdir)
        (log-f :info "writing amended namelist.wps for ungrib.exe" [])))

    ; step 3: run ungrib & metgrid
    (jobmaster/updatestate uuid [{:stage "UNGRIB (3/6)"}])
    (perftrack/instrument-as :wfcjob uuid "ungrib" []
      (fn () (wrfxlib/run-ungrib wps-wdir log-f)))
    (jobmaster/updatestate uuid [{:stage "METGRID (4/6)"}])
    (perftrack/instrument-as :wfcjob uuid "metgrid" []
      (fn () (wrfxlib/run-metgrid wps-wdir log-f)))

    ; step 4: setup the WRF working directory
    (log-f :info "creating WRF working directory" [])
    (wrfxlib/clone-wrf wrf-idir wrf-wdir [])

    ; step 5: symlink all met_em* files to the wrfdir
    (let* (met-em-files (filesys/list-dir-regexp wps-wdir "met_em.+"))
      (log-f :info "symlinking ~p met_em* files to the wrf dir." [(erl/length met-em-files)])
      (!!= :ok (filesys/symlink-files-to-dir met-em-files wps-wdir wrf-wdir)))

    ; step 6: construct the WRF namelist
    (let* (nl-keys (plist/get :wrf_namelist_keys grib-info)
           wrf-nl1 (nllib/make-wrf-namelist sim-from sim-to nl-keys hist-ints all-doms wrf-nl0))
      (log-f :info "writing namelist.input for WRF" [])
      (!!= :ok (file/write-file (filename/join wrf-wdir "namelist.input") (nlist/render-namelists wrf-nl1))))

    ;step 7: run real.exe
    (jobmaster/updatestate uuid [{:stage "REAL (5/6)"}])
    (perftrack/instrument-as :wfcjob uuid "real"
      (fn () (wrfxlib/run-real wrf-wdir log-f)))

    ; step 8: run WRF
    (log-f :info "running WRF" [])
    (jobmaster/updatestate uuid [{:stage "WRF (6/6)"}])
    (let* (wrf-history-hook
            (fn (domain-id sim-time)
              (let* (job-state (jobmaster/get-state uuid)
                     comp-time (plist/get :completion-time :undefined job-state)
                     perc-done (plist/get :percent-done :undefined job-state)
                     sim-accel (plist/get :sim-acceleration :undefined job-state))
                (log-f :info "detected history write at ~p with ~w percent done, completion time ~w and acceleration ~w"
                       [sim-time perc-done comp-time sim-accel]))
              (postproc/render uuid wrf-wdir sim-from sim-time domain-id [{:kml "T2"}]))
           cfl-violation-hook
            (fn (ext-mon-pid)
              (log-f :error "*** detected CFL violation, terminating WRF job. ***" [])
              (erl/send ext-mon-pid {:kill :cfl-violation-detected})))
      (perftrack/instrument-as :wfcjob uuid "wrf" [{:num_nodes num-nodes} {:ppn ppn}]
        (fn () (wrfxlib/run-wrf uuid wrf-wdir num-nodes ppn wall-time-hrs sim-from sim-to 120 wrf-history-hook cfl-violation-hook log-f))))

    (log-f :info "end of job reached" [])
    (jobmaster/updatestate uuid [{:stage "COMPLETE"} {:percent-done 100.0}])

    :ok))


(defn+ test ()
  (let* (uuid "25b55327-2c43-4d62-beb9-a314ccf91c9f")
    (jobmaster/submit uuid :wfcjob 
        [{:history_interval [180 120 60]}
         {:wrf_install_dir (configsrv/get-conf :wrf_install_dir)}
         {:wps_install_dir (configsrv/get-conf :wps_install_dir)}
         {:wps_geog_dir (configsrv/get-conf :wps_geog_dir)}
         {:geogrid_table "geogrid/GEOGRID.TBL.ARW"}
         {:grib_source_name :nam_218}
         {:sim_from {{2014 2 4} {0 0 0}}}
         {:grid_code "colorado_meteo_3d_v1"}
         {:wps_nl "etc/nlists/colo_3dom.wps"}
         {:wrf_nl "etc/nlists/colo_3dom.input"}
         {:num_nodes 10} {:ppn 12} {:wall_time_hrs 4} {:forecast_length_hrs 4} ])))


(defn+ forecast (from fc-len-hrs wps-nl wrf-nl grid-code num-nodes ppn wall-time-hrs grib-src hist-int)
  (let* (uuid     (lists/flatten (iol/format "wfc-ondemand-~s" [(ta/to-esmf-str from)]))
         wps-file (filename/join ["etc/nlists" wps-nl])
         wrf-file (filename/join ["etc/nlists" wrf-nl]))
    (case (preflight-check [{:file-exists wps-file "wps file missing"}
                            {:file-exists wrf-file "wrf file missing"}
                            {:is-pid (grib_ingest/get_grib_server_pid grib-src) "grib source not found"}
                            {:positive-integer fc-len-hrs "forecast length in hrs must be positive"}
                            {:positive-integer wall-time-hrs "wall time in hrs must be positive"}])
      ([]
        (jobmaster/submit uuid :wfcjob
            [{:sim_from from}
             {:wrf_install_dir (configsrv/get-conf :wrf_install_dir)}
             {:wps_install_dir (configsrv/get-conf :wps_install_dir)}
             {:wps_geog_dir (configsrv/get-conf :wps_geog_dir)}
             {:geogrid_table "geogrid/GEOGRID.TBL.ARW"}
             {:grib_source_name grib-src}
             {:grid_code grid-code}
             {:wps_nl wps-file}
             {:wrf_nl wrf-file}
             {:history_interval hist-int}
             {:num_nodes num-nodes}
             {:ppn ppn}
             {:wall_time_hrs wall-time-hrs}
             {:forecast_length_hrs fc-len-hrs}]))
      (errors
        {:failure errors}))))

