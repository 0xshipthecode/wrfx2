; Copyright (C) 2014 Martin Vejmelka, UC Denver
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
; of the Software, and to permit persons to whom the Software is furnished to do
; so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
; A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(ns wfcjob
  (require wrfxlib nlist nllib plist filesys ext-utils ext-job logsrv io
           configsrv wrf-monitor jobmaster grib_ingest perftrack
           (timelib :as ta) os (io_lib :as iol) (string :as str) filename
           (file :joxify) (erlang :as erl :joxify) (filelib :joxify) lists)
  (use joxa-core utils))



(defn write-kmz-file (uuid wdir sim-from sim-time log-f)
  (let* (kml-dir      (configsrv/get-conf :wrfx2web-kml-dir)
         sim-time-str (ta/to-esmf-str sim-time)
         wrfout-name  (iol/format "~s/wrfout_d03_~s" [wdir (ta/to-esmf-str sim-from)]))
    (filelib/ensure-dir (filename/join [kml-dir uuid "fakefile"]))
    (lists/map (fn (var-info)
                  (let ({var-name var-unit} var-info)
                    (let* (kml-basename (lists/flatten [sim-time-str "-" var-name ".kmz"])
                           kml-absname (filename/join [kml-dir uuid kml-basename])
                           cmd-str (iol/format "deps/viswrf/raster2kml.py ~s ~s ~s ~s ~s"
                                                [wrfout-name var-name var-unit sim-time-str kml-absname]))
                      (erl/spawn (fn ()
                                  (log-f :info "wfcjob obtained results from raster2kml for var ~p ~p"
                                               [var-name (os/cmd cmd-str)])))))) 
                [{"T2" "K"} {"PSFC" "Pa"}])))


(defn monitor-wrf-execution (uuid wdir ext-mon-pid sim-from sim-to wrf-mon-pid log-f)
  "Parse the error output of the process with rank 0 in the working
   directory <wdir> while the wrf job with pid <pid> completes."
  (receive
    ({:wrf-history-written domain-id sim-time}
      (log-f :info "wfcjob detected WRF history write at ~w in domain ~p" [sim-time domain-id])
      (log-f :info "wfcjob progress info - ~p percent done, acceleration ~p time to go ~p completion at ~w"
                 (plist/get-list [:percent-done :sim-acceleration :seconds-to-finish :completion-time]
                                  :not-available (jobmaster/getstate uuid)))
      (when (erl/== domain-id 3)
        (write-kmz-file uuid wdir sim-from sim-time log-f))
        (monitor-wrf-execution uuid wdir ext-mon-pid sim-from sim-to wrf-mon-pid log-f))
    ({:proc-started ext-mon-pid comp-start}
      (log-f :info "wfcjob WRF computation started on ~w, monitoring" [comp-start])
      (let* (fname            (filename/join wdir "rsl.error.0000")
             real-wrf-mon-pid (wrf-monitor/start fname sim-from sim-to comp-start uuid log-f))
        (monitor-wrf-execution uuid wdir ext-mon-pid sim-from sim-to real-wrf-mon-pid log-f)))
    ({:proc-complete ext-mon-pid result}
      (unless (erl/== :undefined wrf-mon-pid) (erl/send wrf-mon-pid :terminate))
      result)
      ; if a :kill is sent, it will be sent to this process
    (:kill
      (log-f :warn "wfcjob [~p] received kill request." [uuid])
      (erl/send ext-mon-pid :kill)
      (monitor-wrf-execution uuid wdir ext-mon-pid sim-from sim-to wrf-mon-pid log-f))))


(defn+ run (args log-f)
  "Execute wfcjob with the given arguments:
   sim-from: simulate from
   forecast-length-hrs: hours to run from sim-from
   uuid: unique identifier of the job
   work-dir: working directory
   wrf-inst-dir: WRF installation directory
   wps-inst-dir: WPS installation directory
   wps-geog-dir: WPS geography data directory
   grib-src-name: name of the GRIB source"
  (let* (uuid           (plist/get :uuid args)
         short-uuid     (plist/get :short-uuid args)
         work-dir       (plist/get :work-dir args)
         wps-idir       (plist/get :wps-install-dir args)
         wrf-idir       (plist/get :wrf-install-dir args)
         grib-src-name  (plist/get :grib-src-name args)
         sim-from       (plist/get :sim-from args)
         fc-hrs         (plist/get :forecast-length-hrs args)
         num-nodes      (plist/get :num-nodes args)
         ppn            (plist/get :ppn args)
         wall-time-hrs  (plist/get :wall-time-hrs args)
         hist-ints      (plist/get :history-interval args)
         grib-info       (grib_ingest/get_grib_info grib-src-name)
         sim-to         (ta/shift-by-hours sim-from fc-hrs)
         wps-wdir       (filename/join work-dir "wps")
         wrf-wdir       (filename/join work-dir "wrf")
         wps-nl0        (nlist/parse (plist/get :wps-nl args) :weather-sim-wps)
         wrf-nl0        (nlist/parse (plist/get :wrf-nl args) :weather-sim-wrf)
         all-doms       (nlist/all-domains wps-nl0))

    (log-f :info "wfcjob [~p] work-dir ~p sim-from ~w sim-to ~w~n" [uuid work-dir sim-from sim-to])
    ; create the working directory for WPS
    (!!= :ok (wrfxlib/clone-wps wps-idir wps-wdir (plist/get :vtable_file grib-info) []))

    ; step 1:  construct innermost domain from ignition point and add it to the namelist and run geogrid
    (let* (wps-nl1 (nllib/make-geogrid-namelist wps-wdir args wps-nl0)
           wps-nl-name (filename/join wps-wdir "namelist.wps"))
      (log-f :info "wfcjob [~p] writing namelist.wps for geogrid" [short-uuid])
      (!!= :ok (file/write-file wps-nl-name (nlist/render-namelists wps-nl1)))
      (jobmaster/updatestate uuid [{:stage "GEOGRID (1/6)"}])
      (perftrack/instrument-as :wfcjob uuid :geogrid []
        (fn () (wrfxlib/run-geogrid wps-wdir log-f)))

      ; step 2: retrieve GRIBs and add ungrib-specific entries to namelist and store it
      (jobmaster/updatestate uuid [{:stage "GRIB retrieval (2/6)"}])
      (log-f :info "wfcjob [~p] retrieving GRIB files for the simulation extent ~w to ~w" [short-uuid sim-from sim-to])
      (let (strategy                [{:use_grib_source grib-src-name},:try_retrieve,{:wait_for_mins,5},:try_retrieve]
            {cov-from cov-to mfest} (grib_ingest/retrieve_gribs sim-from sim-to sim-from strategy)
            wps-nl2                 (nllib/make-ungrib-namelist cov-from cov-to all-doms wps-nl1))
        (!!= :ok (file/write-file wps-nl-name (nlist/render-namelists wps-nl2)))
        (wrfxlib/symlink-grib-files mfest wps-wdir)
        (log-f :info "wfcjob [~p] writing amended namelist.wps for ungrib.exe" [short-uuid])))

    ; step 3: run ungrib & metgrid
    (jobmaster/updatestate uuid [{:stage "UNGRIB (3/6)"}])
    (perftrack/instrument-as :wfcjob uuid :ungrib []
      (fn () (wrfxlib/run-ungrib wps-wdir log-f)))
    (jobmaster/updatestate uuid [{:stage "METGRID (4/6)"}])
    ;(wrfxlib/run-metgrid-par wps-wdir 6 log-f)
    (perftrack/instrument-as :wfcjob uuid :metgrid []
      (fn () (wrfxlib/run-metgrid wps-wdir log-f)))

    ; step 4: setup the WRF working directory
    (log-f :info "wfcjob [~p]: creating WRF working directory" [short-uuid])
    (wrfxlib/clone-wrf wrf-idir wrf-wdir)

    ; step 5: symlink all met_em* files to the wrfdir
    (let* (met-em-files (filesys/list-dir-regexp wps-wdir "met_em.+"))
      (log-f :info "wfcjob [~p] symlinking ~p met_em* files to the wrf dir." [short-uuid (erl/length met-em-files)])
      (!!= :ok (filesys/symlink-files-to-dir met-em-files wps-wdir wrf-wdir)))

    ; step 6: construct the WRF namelist
    (let* (nl-keys (plist/get :wrf_namelist_keys grib-info)
           wrf-nl1 (nllib/make-wrf-namelist sim-from sim-to nl-keys hist-ints all-doms wrf-nl0))
      (log-f :info "wfcjob [~p] writing namelist.input for WRF" [short-uuid])
      (!!= :ok (file/write-file (filename/join wrf-wdir "namelist.input") (nlist/render-namelists wrf-nl1))))

    ;step 7: run real.exe
    (jobmaster/updatestate uuid [{:stage "REAL (5/6)"}])
    (perftrack/instrument-as :wfcjob uuid :real
      (fn () (wrfxlib/run-real wrf-wdir log-f)))

    ; step 8: run WRF
    (log-f :info "wfcjob [~p] running WRF" [short-uuid])
    (jobmaster/updatestate uuid [{:stage "WRF (6/6)"}])
    (let* (start-time (ta/local-time))
      (case (ext-job/run "wrf" (filename/join wrf-wdir "wrf.exe") wrf-wdir num-nodes ppn wall-time-hrs 60000 (erl/* (+ fc-hrs 0.1) 3600000) log-f)
        ({:running ext-mon-pid qid}
          (log-f :info "wfcjob [~p] WRF is queued with id ~p" [short-uuid qid])
          (perftrack/instrument-as :wfcjob uuid :wrf [{:num-nodes num-nodes} {:ppn ppn}]
            (fn () (monitor-wrf-execution uuid wrf-wdir ext-mon-pid sim-from sim-to :undefined log-f))))
        ({:success exit-code}
          (log-f :info "wfcjob [~p] job is already completed, nothing to compute" [short-uuid]))))

    (log-f :info "wfcjob [~p] end of job reached" [short-uuid])
    (jobmaster/updatestate uuid [{:stage "COMPLETE"} {:percent-done 100.0}])

    :ok))


(defn+ test ()
  (let* (uuid "25b55327-2c43-4d62-beb9-a314ccf91c9f")
    (jobmaster/submit uuid :wfcjob 
        [{:history-interval [180 120 60]}
         {:wrf-install-dir (configsrv/get-conf :wrf-install-dir)}
         {:wps-install-dir (configsrv/get-conf :wps-install-dir)}
         {:wps-geog-dir (configsrv/get-conf :wps-geog-dir)}
         {:grib-src-name "nam_218"}
         {:sim-from {{2013 9 1} {0 0 0}}}
         {:wps-nl "etc/nlists/colo_3dom.wps"}
         {:wrf-nl "etc/nlists/colo_3dom.input"}
         {:num-nodes 12} {:ppn 12} {:wall-time-hrs 4} {:forecast-length-hrs 4} ])))


(defn+ submit (from)
  (let* (uuid (lists/flatten (iol/format "wfc-colo3-~s" [(ta/to-esmf-str from)])))
    (jobmaster/submit uuid :wfcjob
        [{:sim-from from}
         {:wrf-install-dir (configsrv/get-conf :wrf-install-dir)}
         {:wps-install-dir (configsrv/get-conf :wps-install-dir)}
         {:wps-geog-dir (configsrv/get-conf :wps-geog-dir)}
         {:grib-src-name "nam_218"}
         {:wps-nl "etc/nlists/colo_3dom.wps"}
         {:wrf-nl "etc/nlists/colo_3dom.input"}
         {:history-interval [180 120 60]}
         {:num-nodes 10} {:ppn 12} {:wall-time-hrs 12} {:forecast-length-hrs 48} ])))

