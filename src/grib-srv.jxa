(ns grib-srv
    (require gen_server
	     grib-retr
	     (joxa-core :as jxc)))

(defn+ start-link (grib-src stor-dir)
  ; start a new GRIB server and return the PID
  (gen_server/start_link :grib-srv [grib-src stor-dir] []))

;; API

(defn+ retrieve-gribs (srv-pid from to at-time delta)
  (gen_server/call srv-pid {:retrieve-gribs from to at-time delta} :infinity))


;; Internal funcrions

(defn retrieve-grib-files (from to at-time delta state)
  (jxc/let ({grib-src stor-dir} state)
    (grib-retr/retrieve-gribs from to at-time delta stor-dir grib-src)))

;; gen_server callbacks

(defn+ init (args)
  (jxc/let ([grib-src stor-dir] args)
    {:ok {grib-src stor-dir}}))


(defn+ handle_call (request from state)
  (case request
	({:retrieve-gribs from-time to-time at-time delta}
	 ; GRIB files retrieved here
	 {:reply (retrieve-grib-files from-time to-time at-time delta state) state})
	(:stop-grib-srv 
	 ; here a termination must be started
	 {:stop :normal :ok state})
	(other {:reply {:error (io/format "message ~p not understood." [other])} state})))

(defn+ handle_cast (msg state)
  {:noreply state})

(defn+ handle_info (info state)
  {:noreply state})

(defn+ terminate (reason state)
  :ok)

(defn+ code_change (old-vsn state extra)
  {:ok state})
