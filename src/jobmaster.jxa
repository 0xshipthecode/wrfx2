; Copyright (C) 2013 Martin Vejmelka, UC Denver
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
; of the Software, and to permit persons to whom the Software is furnished to do
; so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
; INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
; A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


(ns jobmaster
  (require utils plist logsrv filesys filename configsrv
           lists (string :as str) gen_server (file :joxify) (timelib :as ta)
           (dict :joxify) (ets :joxify) (erlang :as erl :joxify) (io_lib :as iol) os)
  (use joxa-core utils))


(defn+ start-link ()
  (gen_server/start_link {:global :jobmaster} :jobmaster {:no-table [] (logsrv/make-log-f "system")} []))

;; API


(defn+ job-done (job-id)
  "Notify the jobmaster that the job <job-id> is complete."
  (gen_server/call {:global :jobmaster} {:job-done job-id}))


(defn+ submit (uuid mod args)
  "Submits a job by executing <mod>/submit with args <args>.
   Returns the job id (a uuid)."
  (gen_server/call {:global :jobmaster} {:submit-job uuid mod args}))


(defn+ deljob (job-id)
  "Remove the job named <job-id> from the master index."
  (gen_server/call {:global :jobmaster} {:remove-job job-id}))


(defn+ getstate (job-id)
  "Retrieve the plist containing the information about job <job-id>."
  (gen_server/call {:global :jobmaster} {:get-job-state job-id}))


(defn+ updatestate (job-id new-state)
  "Update the plist containing the information about job <job-id> with the plist <new-state>."
  (gen_server/call {:global :jobmaster} {:update-job-state job-id new-state}))


(defn+ removestate (job-id keys)
  "Remove the keys <keys> from the state of job with id <job-id>."
  (gen_server/call {:global :jobmaster} {:remove-job-state job-id keys}))


(defn+ getjobpid (job-id)
  "Retrieve the pid of the job named <job-id>."
  (gen_server/call {:global :jobmaster} {:get-job-pid job-id}))


(defn+ listjobs ()
  "List all jobs currently indexed by the jobmaster."
  (gen_server/call {:global :jobmaster} :list-jobs))


(defn+ livejobs()
  "List all currently running jobs."
  (gen_server/call {:global :jobmaster} :live-jobs))


(defn+ kill (uuid)
  "Kill the job <uuid> if it still running.
  The reason is specified as :by-request.
  Job is not removed from the jobmaster lists."
  (gen_server/call {:global :jobmaster} {:kill-job uuid :by-request}))


;; gen_server callbacks

(defn+ init (args)
  (let ({_tbl _live-jobs log-f} args)
    {:ok {(ets/new :jmtbl []) [] log-f}}))


;; submit a job by the jobmaster
(defn execute-job-internal (mod args)
  "Execute a job inside a new process."
  (let* (uuid (plist/get :job-id args))
    (erl/spawn (fn ()
      (try*
        (let* (work-dir (filename/join (configsrv/get-conf :workspace-dir) uuid))
          (!!= :ok (filesys/create-dir work-dir))
          (erl/apply mod :run [(plist/set :work-dir work-dir args) (logsrv/make-log-f uuid)])
          (jobmaster/updatestate uuid [{:result "SUCCESS"} {:jmts (ta/local-time)}]))
      (catch (type body)
        (case body
          ({:killed :by-request}
            (logsrv/msg "system" :info "job [~p] was killed by request." [uuid])
            (jobmaster/updatestate uuid [{:result "KILLED"} {:reason "killed by request"} {:jmts (ta/local-time)}]))
          ({:killed with-reason}
            (logsrv/msg "system" :error "job [~p] was killed with reason ~p.~n" [uuid with-reason])
            (jobmaster/updatestate uuid [{:result "KILLED"} {:reason (lists/flatten (iol/format "killed with reason ~p" [with-reason]))} {:jmts (ta/local-time)}]))
          (_
            (jobmaster/updatestate uuid [{:result "FAILED"} {:reason (lists/flatten (iol/format "crashed with exception type ~p body ~p" [type body]))}])
            (logsrv/msg "system" :error "job [~p] crashed (exception: type ~p body ~p)~nstacktrace ~p~n"
                        [uuid type body (erl/get-stacktrace)])))))
      ; whatever happens, the log gets closed
      (logsrv/close-log uuid)
      ; notify the server process that the job is done (and is to be removed from the set of live jobs
      (job-done uuid)))))


;; the jobmaster keeps tabs on all running and ended jobs by keeping
;; track of the tuple {uuid job-pid job-state}
;;
(defn+ handle_call (request from state)
  (let ({job-table live-jobs log-f} state)
    (case request
      ; add a new job to the pool
      ({:add-job job-id job-pid}
        (ets/insert job-table {job-id job-pid []})
        {:reply :ok state})
      ; remove the job job-id from the pool
      ({:remove-job job-id}
        (ets/delete job-table job-id)
        {:reply :ok {job-table (lists/delete job-id live-jobs) log-f}})
      ; retrieve the entire job state for job job-id
      ({:get-job-state uuid}
        (try* 
          {:reply (ets/lookup-element job-table uuid 3) state}
          (catch (type bdy)
            {:reply :no-such-job state})))
      ; retrieve the job pid for job job-id
      ({:get-job-pid job-id}
        (try*
          {:reply (ets/lookup-element job-table job-id 2) state}
          (catch (type bdy)
            {:reply :no-such-job state})))
      ; update the job state
      ({:update-job-state uuid new-state}
        (try*
          (let* (updated-state (plist/update-with new-state (ets/lookup-element job-table uuid 3)))
            (ets/update-element job-table uuid {3 updated-state})
            {:reply :ok state})
          (catch (type bdy)
            (do
              (log-f :error "jobmaster: error updating state for job ~p type ~p bdy ~p trace ~p~n" [uuid type bdy (erl/get-stacktrace)])
              {:reply {:error type bdy} state}))))
      ; remove some keys from the job state
      ({:remove-job-state job-id ks}
        (try*
          (let* (state (ets/lookup-element job-table job-id 3))
            (ets/update-element job-table job-id {3 (plist/remove-list ks state)})
            {:reply :ok state})
          (catch (type bdy)
            {:reply {:error type bdy} state})))
      ; submit a new/existing job (matched by uuid)
      ({:submit-job uuid mod args}
        (case (lists/member uuid live-jobs)
          (:true
            (log-f :info "jobmaster: job ~p already running" [uuid])
            {:reply {:ok uuid} state})
          (:false
            (logsrv/create-log uuid)
            (let* (args2   (plist/update-with [{:job-id uuid} {:short-job-id (str/substr uuid 1 8)}] args)
                   job-pid (execute-job-internal mod args2))
              (log-f :info "jobmaster: job ~p activated NOW" [uuid])
              (ets/insert job-table {uuid job-pid []})
              {:reply {:ok uuid} {job-table (uuid . live-jobs) log-f}}))))
      ; notification that a job has been deactivated (from the job)
      ({:job-done uuid}
        (log-f :info "jobmaster: notified that job ~p is done" [uuid])
        {:reply :ok {job-table (lists/delete uuid live-jobs) log-f}})
      ; return a list of all jobs stored by the jobmaster
      (:list-jobs
        {:reply (ets/select job-table [{{:$1 :$2 :$3} [] [:$1]}]) state})
      ; return a list of all jobs currently running
      (:live-jobs
        {:reply live-jobs state})
      ; kill the job uuid
      ({:kill-job uuid with-reason}
        (let ([{uuid jpid jstate}] (ets/lookup job-table uuid))
          (ets/update-element job-table uuid {3 (plist/set :stage "KILLED" jstate)})
          (log-f :info "jobmaster: killing job ~p with reason ~p." [uuid with-reason])
          (erl/send jpid {:kill with-reason})
          {:reply :ok state}))
      ; message not understood
      (other
        (logsrv/error :flash "jobmaster: message ~p not understood, fix it!" [other])
        {:reply :invalid-request state}))))


(defn+ handle_cast (msg state)
  {:noreply state})


(defn+ handle_info (info state)
  {:noreply state})


(defn+ terminate (reason state)
  :ok)


(defn+ code_change (old-vsn state extra)
  {:ok state})

